(function() {
	var WEB_PLAYER_POPUP;
	var WEB_PLAYER_CTRL;
	var WEB_PLAYER_STATE = false;
	var WEB_PLAYER_LIST = [];
	var WEB_PLAYER_CNT = 0;
	MELON.WEBSVC.POC = {
		popupErrorMsg : "\n※ MSN,야후,구글 팝업 차단 툴바가 설치된 경우 팝업허용을 해주셔야만 팝업창이보입니다.\n※ 윈도우 XP SP2 사용자일 경우에는 브라우저 상단의 노란색[알림표시줄]에 있는 팝업 차단 알림줄을 클릭하여 팝업을 허용해 주시기 바랍니다.\n",
		melonDomain   : "melon.com",
		httpMelonWww  : "//www.melon.com",
		httpMelonLive : "//www.melon.com",
		httpMelonVod  : "//www.melon.com",
		setPocId : function(){
			var pocId = getCookie("POC");
			if(pocId == "" || typeof pocId == "undefined"){
				$.getJSON( "/common/useragent_info.json", function( data ) {
					var pocId = data.pocId;
					// iOS13 부터 아이패드의경우 UA값이 "Macintosh"으로 넘오기 때문에 pocId가 정상적으로 세팅되지 않음 (MP10으로 넘어옴)
					// pocId가 "MP10" 이고 터치포인트 정보가 1보다 크면 패드로 인식하고 pocId를 "IT10"으로 전환해준다.
					if(data.pocId == "MP10" && navigator.maxTouchPoints > 1){
						pocId = "IT10";
					}
					setCookie("POC", pocId, 0, "/", MELON.WEBSVC.POC.melonDomain);
				});
			}
		},
		getPocId : function(){
			var pocId = getCookie("POC");
			return pocId;
		},
		isIPad : function(){
			var isIPad = false;
			if((navigator.platform == 'MacIntel' && navigator.maxTouchPoints > 1)){
				isIPad = true;
			}
			return isIPad;
		},
		isTablet : function(){
			var userAgent = navigator.userAgent;
			var isTablet = false;
			if(userAgent.indexOf("Android") > 0 && userAgent.indexOf("Mobile") == -1){
				isTablet = true;
			} else if(userAgent.indexOf("iPad") > 0 || MELON.WEBSVC.POC.isIPad()){
				isTablet = true;
			}
			return isTablet;
		},
		tabletGuidePop : function(){
			window.open('//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/error_page/error_tabletTypeB.html','tabletPopTypeB','scrollbars=no, resizable=no, location=no, width=560, height=273');
		},
		serverDeployPhase : function(domain){

			//var retrunDomain = deployPhase + domain

			var locationInfo = location.host;
			var retrunDomain = domain;

			if(locationInfo.indexOf("-") > -1){

				var PHASE_SANDBOX = 'sandbox-';
				var PHASE_CBT = 'cbt-';
				var PHASE_REL = 'rel-';
				var serverPhase = '';

				if(locationInfo.indexOf(PHASE_SANDBOX) > -1){
					serverPhase = PHASE_SANDBOX;
				} else if(locationInfo.indexOf(PHASE_CBT) > -1){
					serverPhase = PHASE_CBT;
				} else if(locationInfo.indexOf(PHASE_REL) > -1){
					serverPhase = PHASE_REL;
				}

				if(domain.indexOf("//") > -1){
					var originPath = domain.split('//');
					var protocal = originPath[0];
					var path = originPath[1];

					retrunDomain = protocal + '//' + serverPhase + path;
				} else {
					retrunDomain = serverPhase + retrunDomain;
				}
			}

			return retrunDomain;
		},
		play : {
			 macplay : function(menuId,songIds,itemFlag){
				    macNotice.open();


					var kakaoPlay="";
					var kakaoRef="";
					//if(document.getElementById('kakaoPlay')!=null&&document.getElementById('ref')!=null){
					if(document.getElementById('ref')!=null){
						//kakaoPlay=document.getElementById("kakaoPlay").value;
						kakaoRef=document.getElementById("ref").value;
					}

					if(typeof itemFlag == "undefined"){
						itemFlag = 1;
					}

					 var isMemberAdult = '0';
					 var p_realNameYN	= 'N';
					 var memberAge = 0;

					 var memberInfo = getMemberInfo();

					 if(memberInfo != null){
						 memberAge = memberInfo.MEMBERAGE;
						 p_realNameYN = memberInfo.REALNAMEYN;
					 }

					 if (memberAge < 19) {
						 isMemberAdult = "0";
					 } else if (memberAge >= 19 && p_realNameYN == "Y") {
						 isMemberAdult = "1";
					 } else if (memberAge >= 19 && p_realNameYN == "N") {
						 isMemberAdult = "2";
					 }

					 var memberAuthInfo = getMemberAuthInfo();

					 var memberAuthFlg = '0';

					 if(memberAuthInfo != null){
						 memberAuthFlg = memberAuthInfo.ADULTAUTHFLG;
					 }

					var IS_INPUT_AUTHENTICATION_ADULT_PWD = getCookie("IS_INPUT_AUTHENTICATION_ADULT_PWD");
					var p_sessionAuthYN = IS_INPUT_AUTHENTICATION_ADULT_PWD == "Y" ? "1" : "0";
					var p_adultYN		= isMemberAdult == "0" ? "0" : "1";
					var p_adultOptAutoYN= memberAuthFlg;
					var p_adultOptAutoYN2 = "0";
					 p_adultOptAutoYN2 = p_adultOptAutoYN == "3" ? "2" : p_adultOptAutoYN== "2" ? "1" : p_adultOptAutoYN== "5" ? "1" : "0";

//				20171031	 hifi여부
						var isHiFiMenu = false;
						try{
							if(typeof menuId != 'undefined'){
								//20170712 아티스트채널>HiFi탭메뉴아이디 추가(27220201,27220101)
								if(menuId.length > 2){
									if('89' == menuId.substr(0,2)
											|| '27220201' == menuId
											|| '27220101' == menuId
											){
										isHiFiMenu = 1;
									}
								}
							}
						}catch(e){}
//

					if( $("#notifyFrame2").length < 1 ){
						var notifyFrame2 = '<iframe id="notifyFrame2" name="notifyFrame2" width=0 height=0 src="" style="display:none;"></iframe>';
						$(notifyFrame2).appendTo("body");
					}
					if( $("#notifyFrame3").length < 1 ){
						var notifyFrame3 = '<iframe id="notifyFrame3" name="notifyFrame3" width=0 height=0 src="" style="display:none;"></iframe>';
						$(notifyFrame3).appendTo("body");
					}
					if(kakaoRef!=null&&kakaoRef!=''){
						var api = new MPAPI({
							   target: $('#notifyFrame2')
							   ,ref: kakaoRef // 20171031 pvlog 추가시  게이트 여부

							});
					}else{
						var api = new MPAPI({
							   target: $('#notifyFrame2')
							});
					}

					var checkos = true;
					var uav = api.macOSVersion();
					var exUA = ['10.9.5','10.9.4','10.9.3','10.9.2','10.9.1','10.9','10.8.5','10.8.4','10.8.3','10.8.2','10.8.1','10.8'];
					$.each(exUA, function(i,v) {
						if ( uav.indexOf(v) > -1 ) {
							checkos = false;
							return;
						}
					});
					if(!checkos){
						alert("Mac OS에서는 멜론 Mac PC 플레이어를 이용하여 음악을 감상하실 수 있습니다.\n멜론 Mac PC플레이어는 OS 버전 10.10부터 설치 가능합니다.\n사용 중인 OS 버전을 확인해주세요.");
//						MELON.WEBSVC.POC.play.goWebplyer(menuId,songIds,itemFlag);
						return;
					}

							var MAC = chkMACAuth();
							var list = [];
								//여러곡
								if(songIds instanceof Array){
									var tempArray = songIds;
									var itemFlagArray =itemFlag;
								for (var i=0; i < tempArray.length; i++){
										if(tempArray[i] != ''){
											list.push({
												ITEMFLAG: itemFlagArray,
												ITEMID: tempArray[i],
											STATISTICID : menuId  //20171031 pvlog 추가시  게이트 여부
											});
										}
									}
								}else{
									var itemFlagArray =itemFlag;
									list.push({
										ITEMFLAG: itemFlagArray,
										ITEMID: songIds,
										STATISTICID : menuId //20171031 pvlog 추가시  게이트 여부
									});
								}
								var schme ="melonplayer://play?ref="+kakaoRef+"&menuid="+menuId+"&cid="+songIds+"&cflag="+itemFlag+"&isHifiMenu="+isHiFiMenu+"&loginTime="+"&userId="+encodeURIComponent(getMemberId())+"&memberKey="+encodeURIComponent(getMemberKey())+"&token="+encodeURIComponent(getMemberToken())+"&mac="+encodeURIComponent(getMACHeaderCookie());

								//document.location.href=schme;
								$('#notifyFrame3').prop('src',schme);
//								api.play({
//									USERID				:getMemberId(),
//									USERNO				:getMemberKey(),
//									TOKEN			   :getMemberToken() ,
//									MAC				 :getMACHeaderCookie(),
//									SESSIONAUTH			:p_sessionAuthYN,
//									REALNAMETYPE		:p_realNameYN,
//									ADULTTYPE			:p_adultYN,
//									PASSWORDAUTOOPTION	:p_adultOptAutoYN2,
//									LOGINTIME: getLoginTime(),
//									ISHIFIMENU			:isHiFiMenu,    //hifi  여부 20171031
//									LIST: list
//									}, function(status, errormsg) {
//									});




				},

			/**
			 * 곡재생
			 * @function
			 * @name MELON.WEBSVC.POC.play.playSong
			 * @param menuId 메뉴 아이디
			 * @param songIds 곡 아이디
			 * @examplesç
			 * MELON.WEBSVC.POC.play.playSong(menuId,'12345,12346');
			 */
			playSong : function(menuId,songIds,itemFlag){

				if(songIds == null || songIds == ''){
					alert("대표곡 정보를 준비중입니다.");
					return;
				}
				//ipad
				if(MELON.WEBSVC.POC.getPocId() == 'IT10'){
					var urlScheme  = 'melonipad://play?cid='+songIds+'&ctype=song&menuId='+menuId;
					MELON.WEBSVC.POC.link.ipadAppLaunch(urlScheme);
					return;
				}

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}

				var isMac = (navigator.userAgent.indexOf("Mac") > 0);
				//var isMac = true;

				if (isMac) {
					MELON.WEBSVC.POC.play.macplay(menuId,songIds,itemFlag);
				}
				else {

					if(typeof itemFlag == "undefined"){
						itemFlag = 1;
					}

					//MELONSVC-2224 비로그인 시 웹플레이어 로직 제거
					var itemFlagArray = new Array();
					var itemIdArray = new Array();
					//여러곡
					if(songIds instanceof Array){
						var tempArray = songIds;
						for (var i=0; i < tempArray.length; i++){
							if(tempArray[i] != ''){
								itemFlagArray[i] = itemFlag;
								itemIdArray[i] = tempArray[i];
							}
						}
					}else{//단일곡
						itemFlagArray[0] = itemFlag;
						itemIdArray[0] = songIds;
					}

					//windowsXp 분기처리
					if(player.isWindowsXp() || isPcpHomeTab()){
						player.ocxPlay(menuId,itemFlagArray,itemIdArray);
					}else{
						player.newPcpPlay(menuId, itemFlag, itemIdArray);
					}
				}
			},

			/* 라이브 고화질 준비중.  */
			playHighMv : function(menuId, mvId ,itemFlag){
				if(mvId == null || mvId == ''){
					alert("occur error.");
					return;
				}
				var isMac = (navigator.userAgent.indexOf("Mac") > 0);
				if (isMac) {
					alert("맥에서는 고화질 플레이어 준비중~");
				}
				else {

					if(typeof itemFlag == "undefined"){
						itemFlag = 21;
					}

					// 로그인이면
					if (isMelonLogin()) {
						var itemFlagArray = new Array();
						var itemIdArray = new Array();

						itemFlagArray[0] = itemFlag;
						itemIdArray[0] = mvId;

						player.ocxPlay(menuId,itemFlagArray,itemIdArray);
					}
					// 비로그인이면
					else {
						MELON.WEBSVC.POC.login.loginPopupLayerd('');
						return;
					}
				}
			},


			/**
			 * 곡 재생(form)
			 * @function
			 * @name MELON.WEBSVC.POC.play.playFormSong
			 * @param menuId 메뉴 아이디
			 * @param form 아이디
			 * @examples
			 * MELON.WEBSVC.POC.play.playFormSong(menuId,formId);
			 */
			playFormSong : function(menuId,formId,checkBoxName){

				var songIds = new Array();
				if(typeof checkBoxName == "undefined"){
					checkBoxName = 'input_check';
				}

				$('#'+formId).find("input[name='"+checkBoxName+"']:checked").each(function(){
					if (!isNaN(this.value)) {
						songIds.push($(this).val());
					}
				});

				if(MELON.WEBSVC.POC.getPocId() == 'IT10'){
					if(songIds.length == 0) {
						alert("곡을 선택해 주세요.");
						return;
					} else {
						var strSongId = songIds.join(',');
						MELON.WEBSVC.POC.play.playSong(menuId,strSongId);
						return;
					}
				}

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}


				if(songIds.length == 0) {
					alert("곡을 선택해 주세요.");
				} else {
					MELON.WEBSVC.POC.play.playSong(menuId,songIds);
				}
			},


			/**
			 * 앨범 재생
			 * @function
			 * @name MELON.WEBSVC.POC.play.playAlbum
			 * @param menuId
			 * @param albumId
			 * @examples
			 * MELON.WEBSVC.POC.play.playAlbum(menuId,albumId);
			 */
			playAlbum : function(menuId,albumId){

				//ipad
				if(MELON.WEBSVC.POC.getPocId() == 'IT10'){
					var urlScheme  = 'melonipad://play?cid='+albumId+'&ctype=alb&menuId='+menuId;
					MELON.WEBSVC.POC.link.ipadAppLaunch(urlScheme);
					return;
				}

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}

				var isMac = (navigator.userAgent.indexOf("Mac") > 0);

				if (isMac) {
					MELON.WEBSVC.POC.play.macplay(menuId,albumId,'2');
				}
				else {
					//MELONSVC-2224 비로그인 시 웹플레이어 로직 제거
					itemFlagArray = new Array();
					itemIdArray = new Array();
					itemFlagArray[0] = 2;
					itemIdArray[0] = albumId;

					//windowsXp 분기처리
					if(player.isWindowsXp() || isPcpHomeTab()){
						player.ocxPlay(menuId,itemFlagArray,itemIdArray);
					}else{
						player.newPcpPlay(menuId, '2', itemIdArray);
					}
				}
			},

			/**
			 * 플레이리스트 재생
			 * @function
			 * @name MELON.WEBSVC.POC.play.playPlayList
			 * @param menuId 메뉴 아이디
			 * @param plylstId
			 * @param playListType
			 *           artist : 아티스트
			 *           dj     : dj플레이리스트
			 *           server : 일반플레이리스트
			 * @examples
			 * MELON.WEBSVC.POC.play.playPlayList(menuId,plylstId);
			 */
			playPlayList : function(menuId,plylstId, playListType,targetMemberKey){

				//ipad
				if(MELON.WEBSVC.POC.getPocId() == 'IT10'){
					var urlScheme  = 'melonipad://play?cid='+plylstId+'&ctype=ply&menuId='+menuId;
					MELON.WEBSVC.POC.link.ipadAppLaunch(urlScheme);
					return;
				}

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}

				var isMac = (navigator.userAgent.indexOf("Mac") > 0);

				if(typeof targetMemberKey == "undefined"){
					targetMemberKey = getMemberKey()==""? 0 : getMemberKey();
				}

				if (isMac) {
					MELON.WEBSVC.POC.play.macplay(menuId,plylstId,'23');
				}
				else {
					//MELONSVC-2224 비로그인 시 웹플레이어 로직 제거
					var itemFlag;
					var cType;
					switch(playListType){
						case "dj"			: itemFlag = 6; cType = 97; break;
						case "server"		: itemFlag = 23; cType = 96; break;
						case "artist"		: itemFlag = 26; cType = 95; break;
						default 			: itemFlag = 6; cType = 96;
					}

					itemFlagArray = new Array();
					itemIdArray = new Array();
					itemFlagArray[0] = itemFlag;
					itemIdArray[0] = plylstId;

					//windowsXp 분기처리
					if(player.isWindowsXp() || isPcpHomeTab()){
						player.ocxPlay(menuId,itemFlagArray,itemIdArray,targetMemberKey);
					}else{
						player.newPcpPlay(menuId, cType, itemIdArray);
					}
				}
			},

			/**
			 * 어학 재생 form
			 * @function
			 * @name MELON.WEBSVC.POC.play.playFormStudy
			 * @param menuId 메뉴 아이디
			 * @param formId
			 * @examples
			 * MELON.WEBSVC.POC.play.playFormStudy(menuId,formId,checkBoxName);
			 */
			playFormStudy : function(menuId,formId,checkBoxName){

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}

				var songIds = new Array();
				if(typeof checkBoxName == "undefined"){
					checkBoxName = 'input_check';
				}
				$('#'+formId).find('input[name='+checkBoxName+']:checked').each(function(){
					if (!isNaN(this.value)) {
						songIds.push($(this).val());
					}
				});
				if(songIds.length == 0) {
					alert("강의를 선택해 주세요.");
				} else {
					if (isMelonLogin()) {
						MELON.WEBSVC.POC.play.playSong(menuId,songIds,4);
					} else {
						alert("어학 컨텐츠는 1분 미리듣기가 제공되지 않습니다.\n" +
							  "              로그인 후 이용해 주세요");
						return;
					}
				}
			},

			/**
			 * 어학 재생
			 * @function
			 * @name MELON.WEBSVC.POC.play.playStudy
			 * @param menuId 메뉴 아이디
			 * @param songId
			 * @examples
			 * MELON.WEBSVC.POC.play.playStudy(menuId,songId);
			 */
			playStudy : function(menuId,songId){

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}

				if (isMelonLogin()) {
					MELON.WEBSVC.POC.play.playSong(menuId,songId,4);
				} else {
					alert("어학 컨텐츠는 1분 미리듣기가 제공되지 않습니다.\n" +
						  "              로그인 후 이용해 주세요");
					return;
				}
				//MELON.WEBSVC.POC.play.goWebplyer(menuId,songId, "E");
			},

			/**
			 * 영상 재생
			 * @function
			 * @name MELON.WEBSVC.POC.play.playMv
			 * @param menuId 메뉴 아이디
			 * @param mvId
			 * @examples
			 * MELON.WEBSVC.POC.play.playMv(menuId,mvId);
			 */
			playMv : function(menuId,mvId){
				alert('준비중 재생ID : ' + mvId);
			},


			/**
			 * 웹플레이어 호출 (음원)
			 * @function
			 * @name MELON.WEBSVC.POC.play.goWebplyer
			 * @param menuId 메뉴 아이디
			 * @param songIds
			 * @param contsType	컨텐츠 타입 S:곡, E:어학, A:앨범, P:플레이리스트
			 * @examples
			 * MELON.WEBSVC.POC.play.goWebplyer(menuId,songIds);
			 */
			goWebplyer : function(menuId,songIds,contsType) {
				try{ console.log(" >> " + WEB_PLAYER_STATE); }catch(e){}
				if ( WEB_PLAYER_STATE ) { return; }
				if (typeof contsType === 'undefined' || contsType.length < 1 || contsType == null || contsType == 1 ) {
					contsType = "S";
				}
				if ( contsType == 4 ) {
					contsType = "E";
				}
				var isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;

				if (isMac ) {
					MELON.WEBSVC.POC.play.webPlayerInit(menuId,songIds,contsType);
				} else {
					var url = "//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/webplayer/mini.htm?contsIds=" + songIds + "&contsType=" + contsType;
					var pL = parseInt((window.screen.width - 384) / 2);
					var pT = parseInt((window.screen.height - 620) / 2);
					var pProp = 'width=384,height=620,scrollbars=yes,resizable=0,left=' + pL + ',top=' + pT + ',directories=no,status=no,menubar=no';
					WEB_PLAYER_POPUP = window.open(url, "WEB_PLAYER_POPUP", pProp);
					if (!WEB_PLAYER_POPUP) { alert('차단된 팝업창을 허용해 주세요.');}
				}
			},
			webPlayerInit : function(menuId,songIds,contsType) {
				try{console.log(" webPlayerInit In > ");} catch(e){}
				// 플레이 리스트 생성
				WEB_PLAYER_LIST = [];
				if ( typeof songIds === 'number' || typeof songIds === 'string' ) {
					WEB_PLAYER_LIST[0] = [songIds,'|^',menuId,'|^',contsType].join('');
				} else {
					$.each(songIds, function(i,v) {
						WEB_PLAYER_LIST[i] = [v,'|^',menuId,'|^',contsType].join('');
					});
				}
				// 플래쉬 설치 제어
				var ua = navigator.userAgent;
				if(_FLASH_INSTALLED==true||_FLASH_INSTALLED=="true") {
					WEB_PLAYER_CTRL = $('#mpCtrl')[0];
					if ( !WEB_PLAYER_CTRL || WEB_PLAYER_CTRL.length == 0 ) {
						var ctrl;
						var isMSIE = false;
						var swfParam = "";
						if ( ua.indexOf('rv:11.0') > -1 || ua.indexOf('MSIE') > -1 ) {
							isMSIE = true;
						}
						if (isMSIE) {
							swfParam = "?init=MELON.WEBSVC.POC.play.webPlayerCtrlInit&browserName=" + getBrowserName();
							ctrl = ['<object id="mpCtrl" height="1" width="1" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"  type="application/x-shockwave-flash">',
							        '<param name="movie" value="//www.melon.com/resource/script/player/melonCtrl.swf' + swfParam + '">',
							        '<param name="wmode" value="opaque"/>',
							        '<param name="allowScriptAccess" value="always" />',
							        '<param name="allowFullScreen" value="true" />',
							        '<param name="allowNetworking" value="all" />',
							        '</object>'].join('');
						} else {
							if ( ua.indexOf("Firefox") > -1 ) {
								ctrl = ['<object id="mpCtrl" height="1" width="1" data="//www.melon.com/resource/script/player/melonCtrl.swf' + swfParam + '" type="application/x-shockwave-flash">',
								        '<param name="wmode" value="window"/>',
								        '<param name="allowScriptAccess" value="always" />',
								        '<param name="allowFullScreen" value="true" />',
								        '<param name="allowNetworking" value="all" />',
								        '</object>'].join('');
							} else {
								ctrl = ['<object id="mpCtrl" height="1" width="1" type="application/x-shockwave-flash">',
								        '<param name="movie" value="//www.melon.com/resource/script/player/melonCtrl.swf' + swfParam + '">',
								        '<param name="wmode" value="window"/>',
								        '<param name="allowScriptAccess" value="always" />',
								        '<param name="allowFullScreen" value="true" />',
								        '<param name="allowNetworking" value="all" />',
								        '</object>'].join('');
							}
						}
						$('body').append("<div id='mpController' style='width:1px; height:1px;'></div>");
						$('#mpController').html(ctrl);
						if (!isMSIE) {
							var callback = {};
							callback.init = 'MELON.WEBSVC.POC.play.webPlayerCtrlInit';
							callback.browserName = getBrowserName();
							setTimeout(MELON.WEBSVC.POC.play.webPlayerCtrlParam , 200 , callback);
						}
					} else {
						MELON.WEBSVC.POC.play.webPlayerCtrlInit();
					}
				} else {
					webPlayerFlashAlert();
					return;
				}
			},
			webPlayerCtrlParam : function(param) {
				var player = document.getElementById('mpCtrl');
				if(player && player.setParam) {
					WEB_PLAYER_CNT = 0;
					player.setParam(param);
				} else {
					if ( WEB_PLAYER_CNT > 5) {
						WEB_PLAYER_CNT = 0;
						alert('웹플레이어 구동 중 에러가 발생했습니다.');
						return;
					} else {
						WEB_PLAYER_CNT++;
						setTimeout(MELON.WEBSVC.POC.play.webPlayerCtrlParam , 200 , param);
					}
				}
			},
			webPlayerCtrlInit : function() {
				try{console.log(" webPlayerCtrlInit In > ");} catch(e){}
				//WEB_PLAYER_CTRL.clear();
				try {
					WEB_PLAYER_CTRL = document.getElementById('mpCtrl');
					//WEB_PLAYER_CTRL.limit(1000);
					WEB_PLAYER_CTRL.setList({
						list     : WEB_PLAYER_LIST
					});
					WEB_PLAYER_CTRL.playerCheck('MELON.WEBSVC.POC.play.webPlayerLoad');
				} catch (e) {
					alert('웹플레이어 구동 중 에러가 발생했습니다.');
					return;
				}
			},
			webPlayerLoad : function(openFlag) {
				try{console.log(" webPlayerLoad In > " + openFlag);} catch(e){}
				// 구동 확인 플래그
				WEB_PLAYER_STATE = false;
				if ( !openFlag ) {
					var url = "//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/webplayer/index.htm";
					var pW = 730;
					var pH = 525;
				    var pL = parseInt((window.screen.width-pW)/2);  // 해상도가로
				    var pT = parseInt((window.screen.height-pH)/2); // 해상도세로
				    var pProp = 'width=' + pW + ',height=' + pH + ',scrollbars=yes,resizable=0,left=' + pL + ',top=' + pT + ',directories=no,status=no,menubar=no';
					var ua = navigator.userAgent;
					if (ua.indexOf("MSIE 6") > 0 || ua.indexOf("MSIE 7") > 0 || ua.indexOf("MSIE 8") > 0 || ua.indexOf("Edge") > 0 ) {
						WEB_PLAYER_POPUP = window.open("", "WEB_PLAYER_POPUP", pProp);
						var f = document.createElement("FORM");
					    f.action = url;
					    f.method = "get";
					    f.target = "WEB_PLAYER_POPUP";
					    document.body.appendChild(f);
					    f.submit();
					} else if (ua.indexOf("Safari") > 0 && ua.indexOf("Mac") > 0) {
						WEB_PLAYER_POPUP = window.open(url, "WEB_PLAYER_POPUP", pProp);
					} else {
						WEB_PLAYER_POPUP = window.open("", "WEB_PLAYER_POPUP", pProp);
						try {
							WEB_PLAYER_POPUP.location.href = url;
						} catch(err) {
						}
					}
				    if (!WEB_PLAYER_POPUP) {
				        alert('차단된 팝업창을 허용해 주세요.');
				    }
				}
				if(window.focus){
		     		setTimeout(function(){ try { WEB_PLAYER_POPUP.focus();}catch(err){} }, 1000);
		     	}
			},

			/**
			 * 웹플레이어 호출 (앨범)
			 * @function
			 * @name MELON.WEBSVC.POC.play.goWebplyerByAlbum
			 * @param menuId 메뉴 아이디
			 * @param albumId 앨범 아이디
			 * @examples
			 * MELON.WEBSVC.POC.play.goWebplyerByAlbum(menuId,albumId);
			 */
			goWebplyerByAlbum : function(menuId,albumId) {
				MELON.WEBSVC.POC.play.goWebplyer(menuId,albumId,"A");
			},

			/**
			 * 웹플레이어 호출 (플레이 리스트)
			 * @function
			 * @name MELON.WEBSVC.POC.play.goWebplyerByAlbum
			 * @param menuId 메뉴 아이디
			 * @param plylstId 플레이 리스트 아이디
			 * @examples
			 * MELON.WEBSVC.POC.play.goWebplyerByPlayList(menuId,plylstId);
			 */
			goWebplyerByPlayList : function(menuId,plylstId) {
				MELON.WEBSVC.POC.play.goWebplyer(menuId,plylstId,"P");
			},

			/**
			 * 스마트라디오 재생
			 * @function
			 * @name MELON.WEBSVC.POC.play.playSmartRadio
			 * @param menuId 메뉴 아이디
			 * @param playOpt
			 * @examples
			 * MELON.WEBSVC.POC.play.playSmartRadio(menuId,playOpt);
			 */
			playSmartRadio : function (menuId, playOpt) {

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}

				var isMac = (navigator.userAgent.indexOf("Mac") > 0);
				if (isMac) {
					//2017.12.19
					//MELON.WEBSVC.POC.play.goWeplyerSmartRadio(playOpt);
					alert("스마트라디오는 Mac OS에서 재생 서비스를 제공하지 않습니다.\n안드로이드와 아이폰 멜론 앱의 멜론라디오에서 나만의 맞춤 채널, 스타 DJ, 추천 채널 등을 이용하실 수 있습니다.");
					return;
				}else{
					player.melonplayerPlay(menuId, 'smart', '', playOpt);
				}
			},


			/**
			 * 스마트라디오 웹플레이어 호출
			 * @function
			 * @name MELON.WEBSVC.POC.play.goWeplyerSmartRadio
			 * @param menuId 메뉴 아이디
			 * @param channelId
			 * @examples
			 * MELON.WEBSVC.POC.play.goWeplyerSmartRadio(menuId,channelId);
			 */

			goWeplyerSmartRadio : function (playOpt) {
				if ( playOpt != undefined && playOpt != null && playOpt != "") {

					var isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
					//2017.12.19
					if(isMac){
						alert("스마트라디오는 Mac OS에서 재생 서비스를 제공하지 않습니다.\n안드로이드와 아이폰 멜론 앱의 멜론라디오에서 나만의 맞춤 채널, 스타 DJ, 추천 채널 등을 이용하실 수 있습니다.");
						return;
					};
					if ( !isMac ) {
						playOpt = playOpt.replace(//gi, "^");

						var url = "//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/webplayer/smartRadio.htm?playOpt="+playOpt;
						var pL = parseInt((window.screen.width - 384) / 2);
						var pT = parseInt((window.screen.height - 620) / 2);
						var pProp = 'width=384,height=620,scrollbars=yes,resizable=0,left=' + pL + ',top=' + pT + ',directories=no,status=no,menubar=no';
						WEB_PLAYER_POPUP = window.open(url, "WEB_PLAYER_POPUP", pProp);
						if (!WEB_PLAYER_POPUP) { alert('차단된 팝업창을 허용해 주세요.');}
						return WEB_PLAYER_POPUP;
					}

					var pW = 352;
					var pH = 525;
				    var pL = parseInt((window.screen.width-pW)/2);  // 해상도가로
				    var pT = parseInt((window.screen.height-pH)/2);     // 해상도세로
				    var pProp = 'width=' + pW + ',height=' + pH + ',left=' + pL + ',top=' + pT + ',directories=no,status=no,menubar=no';
				    //playOpt = encodeURIComponent(playOpt); // encode 해제

				    playOpt = playOpt.replace(//gi, "^");

					var ua = navigator.userAgent;
					if (ua.indexOf("MSIE 6") > 0 || ua.indexOf("MSIE 7") > 0 || ua.indexOf("MSIE 8") > 0) {
						WEB_PLAYER_POPUP = window.open("", "WEB_PLAYER_POPUP", pProp);
						var f = document.createElement("FORM");
						var url = "//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/webplayer/smartRadio.htm?playOpt="+playOpt;
					    f.action = url;
					    f.method = "get";
					    f.target = "WEB_PLAYER_POPUP";
					    var indexQM = url.indexOf("?");
					    if (indexQM>=0) {
					        var params = url.substring(indexQM+1).split("&");
					        for (var i=0; i<params.length; i++) {
					            var keyValuePair = params[i].split("=");
					            var input = document.createElement("INPUT");
					            input.type="hidden";
					            input.name  = keyValuePair[0];
					            input.value = keyValuePair[1];
					            f.appendChild(input);
					        }
					    }
					    document.body.appendChild(f);
					    f.submit();
					} else if(ua.indexOf("Safari") > 0 && ua.indexOf("Mac") > 0) {
						WEB_PLAYER_POPUP = window.open("//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/webplayer/smartRadio.htm?playOpt="+playOpt, "WEB_PLAYER_POPUP", pProp);
					} else {
						WEB_PLAYER_POPUP = window.open("", "WEB_PLAYER_POPUP", pProp);
						WEB_PLAYER_POPUP.location.href = "//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/webplayer/smartRadio.htm?playOpt="+playOpt;
					}

					if (!WEB_PLAYER_POPUP) {
				        alert('차단된 팝업창을 허용해 주세요.');
				    }
				    else {
				    	if(window.focus){
				     		setTimeout(function(){
				     			try { WEB_PLAYER_POPUP.focus();}catch(err){}
				     		}, 1000);
				     	}
				    }
				}
				else {
					alert("곡을 선택해 주세요.");
				}
			},

			/**
			 * 담기
			 * @function
			 * @name MELON.WEBSVC.POC.play.addPlayList
			 * @param songId 곡번호
			 * @param channelId
			 * @examples
			 * MELON.WEBSVC.POC.play.addPlayList(songId);
			 */
			addPlayList : function(songId){
				// 로그인 체크
				if(!MELON.WEBSVC.POC.login.isMelonLogin()) {
					//MELON.WEBSVC.POC.login.loginPopupLayerd(url); 리턴url이 아니기 때문에 url 삭제
					MELON.WEBSVC.POC.login.loginPopupLayerd('');
					return;
				}

				if(songId=='' || songId==undefined){
					alert("곡을 선택해 주세요.");
					return;
				}

				var url  = "/mymusic/common/popup/mymusiccommon_addPlaylistPopUp.htm";
				var title = "addPlayListFrm";
				MELON.WEBSVC.openPopup('',560,730, {'target':title,'scrollbars':'no'},'center',title);

				var $form = $("form#addPlayList");
				$form.remove();
				$form = $('<form></form>');
				$form.attr('action', url);
				$form.attr('method', 'post');
				$form.attr('target', title);
				$form.attr('id', 'addPlayList');
				$form.hide();
				$form.appendTo('body');

				var inputSongId = $('<input type="hidden" name="input_check" value="'+songId+ '">');
				$form.append(inputSongId);
				$form.submit();
//				window.open('/mymusic/common/popup/mymusiccommon_addPlaylistPopUp.htm?songIds='+songId, 'addPlayList','app_,width=560, height=570, status=no, toolbar=no, resizable=no, scrollbars=yes');
			},

			/**
			 * form 담기
			 * @function
			 * @name MELON.WEBSVC.POC.play.addFormPlayList
			 * @param formId
			 * @param channelId
			 * @examples
			 * MELON.WEBSVC.POC.play.addFormPlayList(formId);
			 */
			addFormPlayList : function(formId){
				// 로그인 체크
				if(!MELON.WEBSVC.POC.login.isMelonLogin()) {
					//MELON.WEBSVC.POC.login.loginPopupLayerd(url); 리턴url이 아니기 때문에 url 삭제
					MELON.WEBSVC.POC.login.loginPopupLayerd('');
					return;
				}

				var songList = new Array();
				$('#'+formId).find('.input_check:checked').each(function(){
					if (!isNaN($(this).val())) {
						songList.push($(this).val());
					}
				});
				if(songList==''){
					alert("곡을 선택해 주세요.");
					return;
				}
				var songCnt = $('#'+formId).find('input:checkbox[name=input_check]:checked').length;
				if(songCnt == 0){
					alert("곡을 선택해 주세요.");
					return;
				}
				if(songCnt > 1000){
//					alert('최대 500곡까지 담을 수 있습니다.\n곡 수를 확인하시고 다시 선택해주세요.');
					alert('플레이리스트에는 최대 1,000곡까지 담기 가능합니다.\n편집모드에서 수록곡을 수정하신 후 다시 시도해주세요.');
					return;
				}
				var url = '/mymusic/common/popup/mymusiccommon_addPlaylistPopUp.htm';
				var title = 'addPlayList';
				MELON.WEBSVC.openPopup('',560,730,{'target':title,'scrollbars':'no'},'center',title);
				$('#'+formId).attr('target',title);
				$('#'+formId).attr('action',url);
				$('#'+formId).attr('method','post');
				$('#'+formId).submit();
//				MELON.WEBSVC.openPopup('/mymusic/common/popup/mymusiccommon_addPlaylistPopUp.htm?songIds='+songList,560,730, {'target':'addPlayList','scrollbars':'no'},'center');
//				window.open('/mymusic/common/popup/mymusiccommon_addPlaylistPopUp.htm?songIds='+songList, 'addPlayList','app_,width=560, height=570, status=no, toolbar=no, resizable=no, scrollbars=yes');
			},

			ocxPlay : function(menuId, itemFlags, itemIds){
				player.ocxPlay(menuId, itemFlags, itemIds);
			},

			melonplayerActualPlay : function(params){
				player.melonplayerActualPlay(params);
			},

			melonplayerActualPlaySocket : function(menuId, itemFlags, itemList){
				player.melonplayerActualPlaySocket(menuId, itemFlags, itemList);
			},

			melon_ocx_message : function(PLAYER_RETURN){
				return player.melon_ocx_message(PLAYER_RETURN);
			},

			getMelonPlayerObject : function(){
				return melonPlayerFunc.getMelonPlayerObject();
			},

			browser : function(){
				return melonPlayerFunc.browser();
			},

			chkMelonPlayerObject : function (){
				return melonPlayerFunc.chkMelonPlayerObject();
			},

			melonplayerPlay : function(menuId, itemFlags, itemIds, playList){
				player.melonplayerPlay(menuId, itemFlags, itemIds, playList)
			},
		},

		link : {
			//곡상세
			goSongDetail : function(songId){
				if(typeof songId == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/song/detail.htm?songId=' + songId;
			},
			//앨범상세
			goAlbumDetail : function(albumId){
				if(typeof albumId == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/album/detail.htm?albumId=' + albumId;
			},


			/**
			 * 영상 상세 이동
			 *
			 * @function
			 * @param menuId : 통계 메뉴ID
			 *        mvId : 영상 ID
			 *        contentsType : 곡/영상 구분 (song/video)
			 *        mvTypeCode
			 */
			goMvDetail : function(menuId, mvId, contentsType, mvTypeCode){

				if(typeof mvId == "undefined") return;

				var action = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com"); //MELON.WEBSVC.POC.httpMelonVod;
				//mvTypeCode : MV0007 live인 경우 도메인 분리
				if(typeof mvTypeCode != "undefined" && mvTypeCode == 'MV0007'){
					action = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com"); // MELON.WEBSVC.POC.httpMelonLive;
				}

				var $form = $('<form></form>');
				var $menId = $('<input type="hidden" name="menuId" value="'+menuId+'"/>')

				if(contentsType == "song"){
					action += '/video/detail.htm?songId=' + mvId;
				}else{
					action += '/video/detail.htm?mvId=' + mvId;
				}

				action += '&menuId=' + menuId;

				location.href = action;

				//$form.attr('action',action);
				//$form.attr('method','post');
				//$form.appendTo('body');
				//$form.append($menId);
				//$form.submit();
			},
			/*
			 * @param artistId
			 * @param tabIndex
			 *     1 : 타임라인
			 *     2 : 상세정보
			 *     3 : 곡
			 *     4 : 앨범
			 *     5 : 영상
			 *     6 : 포토
			 *     7 : 아티스트 플레이리스트
			 *     8 : 공연 -> 멜론티켓서비스 오픈으로 공연 탭 제거(170106). 아티스트 페이지의 디폴트 페이지로 이동하게 수정
			 *     9 : 관련상품 -> 이 탭이 뭔지 모르지만 없으므로(170106) 아티스트 페이지의 디폴트 페이지로 이동하게 수정
			 *    10 : 팬
			 *    11 : 리뷰
			 *    12 : 쇼핑 -> 2016년 12월 31일 부로 멜론쇼핑 서비스가 종료됨에 따라 아티스트페이지의 디폴트 페이지로 이동하게 수정.
			 *    13 : Hi-Fi
			 */
			goArtistDetail : function(artistId,tabIndex){
				if(typeof artistId == "undefined") return;
				switch (tabIndex != null ? tabIndex.toString() : null) {
					case "1":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/timeline.htm?artistId=' + artistId;	break;
					case "2":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/detail.htm?artistId=' + artistId;		break;
					case "3":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/song.htm?artistId=' + artistId;		break;
					case "4":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/album.htm?artistId=' + artistId;		break;
					case "5":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/video.htm?artistId=' + artistId;		break;
					case "6":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/photo.htm?artistId=' + artistId;		break;
					case "7":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/recmlist.htm?artistId=' + artistId;	break;
					case "8":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/timeline.htm?artistId=' + artistId;	break;
					case "9":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/timeline.htm?artistId=' + artistId;	break;
					case "10":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/fan.htm?artistId=' + artistId;			break;
					case "11":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/review.htm?artistId=' + artistId;		break;
					case "12":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/timeline.htm?artistId=' + artistId;	break;
					case "13":	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/hifi.htm?artistId=' + artistId;		break;
					default:	location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/timeline.htm?artistId=' + artistId;	break;
				}
				//if(typeof artistId == "undefined") return;
				//location.href = '/artist/timeline.htm?artistId=' + artistId;
				//alert('링크준비중 : ' + artistId);
			},
			//프로그램상세
			goProgramDetail : function(menuSeq,progSeq){
				if(typeof menuSeq == "undefined" || typeof progSeq == "undefined") return;
				//menuSeq = 2 뮤직비디오일 경우 뮤직비디오 페이지 링크로 이동
				if(menuSeq == '2'){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/tv/mv/index.htm';
				}else{
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/tv/menu/index.htm?menuSeq='+menuSeq+'&progSeq='+progSeq;
				}
			},
			//테마상세
			goThemaDetail : function(themaId){
				if(typeof themaId == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/tv/thema/inform.htm?progSeq=' + themaId;
			},
			//마이뮤직 > 타인의 메인으로 이동
			goMyMusic : function(memberKey){
				if(typeof memberKey == "undefined" || memberKey < 1 ){
					alert("정상적인 접근이 아닙니다.");
					location.href="//" + MELON.WEBSVC.POC.serverDeployPhase("www.melon.com");
					return;
				}
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/main/mymusicmainother_list.htm?memberKey='+memberKey;
			},
			//공연상세
			goPerfDetail : function(artistId, perfId){
				if(typeof artistId == "undefined" || typeof perfId == "undefined") return;
				location.href = "//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/artist/concertDetail.htm?artistId="+artistId+"&perfId="+perfId;
			},
			//메세지 상세보기
			goMessage : function(){
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/messagepresent/mymusicmessage_list.htm';
			},
			//답장하기
			goReturnMessage : function(memberkey,menuId){
				// 방어 로직 추가
				if(typeof memberkey == "undefined" || memberkey < 1 ){
					alert("정상적인 접근이 아닙니다.");
					window.location="//" + MELON.WEBSVC.POC.serverDeployPhase("www.melon.com");
					return;
				}

				if(!MELON.WEBSVC.POC.login.isMelonLogin()){
					MELON.WEBSVC.POC.login.loginPopupLayerd('');
					return;
				}
				if(MELON.WEBSVC.CLEAN.isBlacklist('MUSIC_MESSAGE')){
					return;
				}

				var ua = navigator.userAgent.toLocaleLowerCase();

				$.get("https://"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/mymusic/friend/mymusicfriend_listFriendMemberStatus.json",{memberkey : memberkey},function(data){
				}).done(function(data){
					if(data.MEMBERSTATUS != '0'){
						alert("탈퇴한 회원입니다.");
						return;
                    }else{
                    	params = {
             	        		'targetMemK':memberkey,
             	        		'targetMemN':data.MEMBERNICKNAME,
             	        		'reMessage':'Y',
             	        		'menuId':menuId
                     		}
        	     		method = "POST";
        	     		var form = document.createElement("form");
        	     		form.setAttribute("method",method);
        	     		form.setAttribute("action", "https://"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/mymusic/messagepresent/popup/mymusicmessage_insertForm.htm");
        	     		for(var key in params){
        	     			var hiddenField = document.createElement("input");
        	     			hiddenField.setAttribute("type","hidden");
        	     			hiddenField.setAttribute("name",key);
        	     			hiddenField.setAttribute("value", params[key]);
        	     			form.appendChild(hiddenField);
        	     		}
        	     		document.body.appendChild(form);
        	     		if (ua.indexOf('safari') > -1 || ua.indexOf('IS40') > -1){
//        	     			window.open('','pop', 'app_,width=730,height=750');
        	     			MELON.WEBSVC.openPopup('' ,730, 750, {'target':'pop','scrollbars':'no'},'center','pop');
    					}else{
//    						window.open('','pop', 'app_,width=730,height=738');
    						MELON.WEBSVC.openPopup('' ,730, 738, {'target':'pop','scrollbars':'no'},'center','pop');
    					}
        	     		form.setAttribute("target", "pop");
        	     		form.submit();
                    	//MELON.WEBSVC.openPopup('/mymusic/messagepresent/popup/mymusicmessage_insertForm.htm?targetMemK='+memberkey+'&targetMemN='+nickname+'&menuId='+menuId+'&reMessage=Y', 730, 738);
                    }
				});
			},
			//선물
			goPresentSong : function(){
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/messagepresent/mymusicpresent_list.htm';
			},
			goTotalSearch :function(query,contType,formId,section,ipath,useKakaoSpeller,kakaoSpellerDisplyType) {
				if(typeof query == "undefined") return;
				if(typeof contType == "undefined" || contType == "") contType="total";
				if(typeof section == "undefined") section="";
				/*if(typeof ipath == "undefined" || ipath == "") ipath = "srch_form";*/
                if(typeof useKakaoSpeller == "undefined") useKakaoSpeller="Y";
                if(typeof kakaoSpellerDisplyType == "undefined") kakaoSpellerDisplyType="";
                if(kakaoSpellerDisplyType == "BAN") useKakaoSpeller="N";

				//pc플레이어 홈탭일 경우 ipath=srch_app
				var fromMPS = getCookie("MPS"); // 멜론 플레이어에서 왔는지 확인.
				var formObj = $('#' + formId);
				var rUrl = "";
				rUrl = "//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/search/"+contType+"/index.htm";
				formObj.action = rUrl;
				formObj.attr('action',rUrl);
				formObj.attr('method','get');
				formObj.find('[name=q]').val(query);
				formObj.find('[name=section]').val(section);
                formObj.find('[name=kkoSpl]').val(useKakaoSpeller);
                formObj.find('[name=kkoDpType]').val(kakaoSpellerDisplyType);
				formObj.submit();
			},
			goJoin : function(){
				location.href = "https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/join/stipulationagreement_inform.htm";
			},
			goIdSearch : function(){
				location.href = "https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/search/idsearch_inform.htm";
			},
			goTerms : function(termsType, targetType){
				var termsUrl = "";

				switch(termsType){
					case "use"      	: termsUrl = "http://info.melon.com/terms/web/terms1_1.html"; break;
					case "player"		: termsUrl = "http://info.melon.com/terms/web/terms2.html"; break;
					case "privateinfo"	: termsUrl = "http://info.melon.com/terms/web/terms3.html"; break;
					case "youth"		: termsUrl = "http://info.melon.com/terms/web/terms5_1.html"; break;
					default 			: termsUrl = "http://info.melon.com/terms/web/terms1_1.html";
				}

				if(typeof targetType == 'undefined'){
					location.href = termsUrl;
				}else {
					window.open(termsUrl, termsType);
				}
			},
			// DJ플레이리스트 상세
			goDjPlaylistDetail : function(memberStatus,adminOpenYn,delYn,plylstSeq){
				//2014-05-26 요건 변경
				/*if(memberStatus == 1){
					alert("탈퇴한 회원의 컨텐츠 입니다.")
					return;
				}
				if(memberStatus == 2){
					alert("휴면 회원의 컨텐츠 입니다.")
					return;
				}
				if(memberStatus == ''){
					alert("존재하지 않는 회원의 컨텐츠 입니다.")
					return;
				}*/
				if(adminOpenYn == "N"){
					alert("비공개된 컨텐츠 입니다.")
					return;
				}
				if(delYn == "Y"){
					alert("삭제된 컨텐츠 입니다.")
					return;
				}
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/dj/mymusicdjplaylistview_inform.htm?plylstSeq='+plylstSeq;
			},
			// 멜론DJ > 태그허브
			goDjTagHub : function(tagSeq) {
				if(typeof tagSeq == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/dj/tag/djtaghub_list.htm?tagSeq='+tagSeq;
			},
			// DJ플레이리스트 상세(플레이리스트 상태 값 없이 호출)
			goDjCollectionWithoutStatus : function(plylstSeq){
				if(typeof plylstSeq == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/dj/mymusicdjplaylistview_inform.htm?plylstSeq='+plylstSeq;
			},
			// 일반 플레이리스트 상세(플레이리스트 상태 값 없이 호출)
			goPlaylistWithoutStatus : function(plylstSeq){
				if(typeof plylstSeq == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/playlist/mymusicplaylistview_inform.htm?plylstSeq='+plylstSeq;
			},
			// 아티스트 플레이리스트 상세
			goArtistPlaylistDetail : function(plylstSeq){
				if(typeof plylstSeq == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/playlistDetail.htm?plylstSeq=' + plylstSeq;
			},
			// 뮤직스토리 카테고리
			goMstoryCategory : function(mstoryCateSeq){
				if(typeof mstoryCateSeq == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/musicstory/index.htm?mstoryCateSeq=' + mstoryCateSeq;
			},
			// store.melon.com 상품상세 이동.
			goStoreMelonDetail : function(contsType, prodSeq){
				if(typeof contsType == "undefined" || typeof prodSeq == "undefined" ) return;
				window.open('//store.melon.com/api/gate.htm?type='+contsType+'&param='+prodSeq+"&pocId="+MELON.WEBSVC.POC.getPocId(), contsType);
			},
			goPopupWithPageUrl : function(pgeUrl, pgeName){
				if(typeof pgeUrl == "undefined" || typeof pgeName == "undefined" ) return;
				window.open(pgeUrl, pgeName);
			},
			// 컨텐츠 타입별 컨텐츠 상세이동
			goContentsDetail : function(contsType, contsId, menuId){
				//contentsType - song: N10001, album: N10002, video: N10003, photo:N10004, artist: N10006, N10005: 일반 플레이리스트, N10009: DJ플레이리스트

				switch(contsType){
				case "N10001"      	: MELON.WEBSVC.POC.link.goSongDetail(contsId); break;
				case "N10002"		: MELON.WEBSVC.POC.link.goAlbumDetail(contsId); break;
				case "N10003"		: MELON.WEBSVC.POC.link.goMvDetail(menuId, contsId); break;
				case "N10004"		: MELON.WEBSVC.POC.link.goArtistDetail(contsId); break; //포토의 경우 아티스트 상세 페이지 이동
				case "N10005"		: MELON.WEBSVC.POC.link.goPlaylistWithoutStatus(contsId); break;
				case "N10006"		: MELON.WEBSVC.POC.link.goArtistDetail(contsId); break;
				case "N10007"		: MELON.WEBSVC.POC.link.goMstoryDetail(contsId); break;
				case "N10009"		: MELON.WEBSVC.POC.link.goDjCollectionWithoutStatus(contsId); break;
				case "N10010"		: MELON.WEBSVC.POC.link.goDjCollectionWithoutStatus(contsId); break;
				case "N10016"		: MELON.WEBSVC.POC.link.goArtistPlaylistDetail(contsId); break;
				case "N10027"		: MELON.WEBSVC.POC.link.goThemeDetail(contsId); break;
				case "N10029"		: MELON.WEBSVC.POC.link.goNowPlayingDetail(contsId); break;
				case "N10031"		: MELON.WEBSVC.POC.link.goStoryDetail(contsId); break;
				case "DJMGZ"		: location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/dj/magazine/djmagazinedetail_listEpsd.htm?magaznSeq='+contsId; break;
				case "MSTRY"		: MELON.WEBSVC.POC.link.goMstoryCategory(contsId); break;
				case "STRPD"		: MELON.WEBSVC.POC.link.goStoreMelonDetail('product', contsId); break;
				case "STRAT"		: MELON.WEBSVC.POC.link.goStoreMelonDetail('artist', contsId); break;
				default 			: MELON.WEBSVC.POC.link.goAlbumDetail(contsId);
				}

			},
			goClassicPeriodArtist : function(classicMenuId, periodCode){ // 클래식장르 시대별작곡가 리스트[DP0500, ~~]
				if(typeof classicMenuId == "undefined") return;
				if(typeof periodCode == "undefined") {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/classicPeriodArtist_list.htm?classicMenuId='+classicMenuId;
				} else {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/classicPeriodArtist_list.htm?classicMenuId='+classicMenuId+'&periodCode='+ periodCode;
				}
			},
			goClassicArtist : function(classicMenuId){ // 클래식장르 이름순 리스트[DP0500]
				if(typeof classicMenuId == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/classicArtist_list.htm?classicMenuId='+classicMenuId;
			},
			goClassicArtistAlbum : function(artistId, periodCode){ // 클래식자아르 아티스트앨범 리스트[DP0500]
				if(typeof artistId == "undefined") return;
				if(typeof periodCode == "undefined")
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/classicArtistAlbum_list.htm?artistId='+artistId;
				else
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/classicArtistAlbum_list.htm?artistId='+artistId+"&periodCode="+periodCode;
			},
			goGenre4ArtistDetail : function(gnrArtistSeq, gnrCode){ // 클래식,재즈 아티스트앨범 리스트[DP0500]
				if(typeof gnrArtistSeq == "undefined") return;
				if(typeof gnrCode == "undefined"){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/essential_artist_detail.htm?gnrArtistSeq='+gnrArtistSeq;
				}else{
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/essential_artist_detail.htm?gnrArtistSeq='+gnrArtistSeq + '&gnrCode=' + gnrCode;
				}

			},
			goClassicAlbumChart : function(classicMenuId){ // 클래식자아르 아티스트앨범 리스트[DP0500]
				if(typeof classicMenuId == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/classicAlbumChart_list.htm?classicMenuId='+classicMenuId;
			},
			goClassicMasterpiece : function(classicMenuId){ // 클래식장르 명반 리스트[DP0500]
				if(typeof classicMenuId == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/classicMasterpiece_list.htm?classicMenuId='+classicMenuId;
			},
			goGenreAlbum : function(classicMenuId, subMenuId){ // 장르-앨범
				if(typeof classicMenuId == "undefined") return;
				if(typeof subMenuId == "undefined") {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/album_list.htm?classicMenuId='+classicMenuId;
				} else {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/album_list.htm?classicMenuId='+classicMenuId+'&subMenuId='+ subMenuId;;
				}
			},
			goGenre4Album : function(gnrCode, dtlGnrCode){ // 장르-앨범
				if(typeof gnrCode == "undefined") return;
				if(typeof dtlGnrCode == "undefined") {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/album_list.htm?gnrCode='+gnrCode;
				} else {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/album_list.htm?gnrCode='+gnrCode+'&dtlGnrCode='+ dtlGnrCode;
				}
			},
			goGenreSong : function(classicMenuId, subMenuId){ // 장르-곡
				if(typeof classicMenuId == "undefined") return;
				if(typeof subMenuId == "undefined") {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/song_list.htm?classicMenuId='+classicMenuId;
				} else {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/song_list.htm?classicMenuId='+classicMenuId+'&subMenuId='+ subMenuId;;
				}
			},
			goGenre4Song : function(gnrCode, dtlGnrCode){ // 장르-곡
				if(typeof gnrCode == "undefined") return;
				if(typeof dtlGnrCode == "undefined") {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/song_list.htm?gnrCode='+gnrCode;
				} else {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/song_list.htm?gnrCode='+gnrCode+'&dtlGnrCode='+ dtlGnrCode;
				}
			},
			goGenreSongChart : function(classicMenuId){ // 클래식 곡 차트 리스트
				if(typeof classicMenuId == "undefined") return;
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/songChart_list.htm?classicMenuId='+classicMenuId;
			},
			goGenreThemaChild : function(classCd, genreCd){ // 클래식 어린이 테마
				if(typeof classCd == "undefined") return;
				if(typeof genreCd == "undefined") {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/song_list.htm?classCd='+classCd;
				} else {
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/genre/song_list.htm?classCd='+classCd+'&genreCd='+ genreCd;;
				}
			},
			goMyCupon : function(){
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/commerce/mypage/coupon/web/couponbox_couponBoxView.htm';
			},
			goMelonCash : function(){
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/commerce/mypage/cash/web/meloncash_listChargedSpentView.htm';
			},
			goAnswer : function(faqId){ //고객지원(검색)
				if(typeof faqId == "undefined") return;
				location.href = '//faqs2.melon.com/customer/faq/informFaq.htm?faqId='+faqId;
			},
			goMultiMessagePop : function(contsType,contsId,menuId){
			/* goMultiMessagePop  : 다중음악메세지 보내기(타입,아이디)
			 *                      ex)goMultiMessagePop('song','342342')
			 *                      타입 종류 => 곡 => song, 앨범 => album, 아티스트 => artist, 뮤비 => mv, 플레이리스트 => plylst,
			 *                      DJ플레이리스트 => djcol, 아티스트플레이리스트 => artistplylst, 포토 => photo,
			 *                      단! 포토의 경우 아이디 = 포토ID,아티스트ID (순서 틀리면 안됨)
			 *                      ex) goMultiMessagePop('photo','2345235,234567')
			 */
				var h = 0;
				if(contsType == 'song'){//곡
					h = 456;
				}else if(contsType == 'album'){//앨범
					h = 456;
				}else if(contsType == 'artist'){//아티스트
					h = 456;
				}else if(contsType == 'mv'){//영상
					h = 460;
				}else if(contsType == 'plylst'){//플레이리스트
					h = 466;
				}else if(contsType == 'djcol'){//DJ플레이리스트
					h = 466;
				}else if(contsType == 'artistplylst'){//아티스트 플레이리스트
					h = 466;
				}else if(contsType == 'photo'){//포토
					h = 546;
				}
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					MELON.WEBSVC.openPopup('https://'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/messagepresent/popup/mymusicmessage_insertMultiForm.htm?contsType='+contsType+'&menuId='+menuId+'&contsId='+contsId, 730, h, {'scrollbars':'no'}, 'center', 'multipop');
				} else {
					MELON.WEBSVC.POC.login.loginPopupLayerd('');
					return;
				}
			},
			//아지톡 2014.01.28
			goAztalk : function() {
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artistplus/aztalk/index.htm';
			},
			goMultiMessageNew : function(contsType,contsId,mvTypeCode){
				if(typeof contsId == "undefined") return;

					var action = MELON.WEBSVC.POC.httpMelonVod;
//					var action = MELON.WEBSVC.POC.httpMelonWww;
					//mvTypeCode : MV0007 live인 경우 도메인 분리
					if(typeof mvTypeCode != "undefined" && mvTypeCode == 'MV0007'){
						action = MELON.WEBSVC.POC.httpMelonLive;
					}

					switch(contsType){
					case "song"      	: window.open('//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/song/detail.htm?songId=' + contsId); break;
					case "album"		: window.open('//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/album/detail.htm?albumId=' + contsId); break;
					case "artist"		: window.open('//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/timeline.htm?artistId=' + contsId); break;
					case "mv"			: window.open( action+'/video/detail.htm?mvId=' + contsId); break;
					case "artistplylst"	: window.open('//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/playlistDetail.htm?plylstSeq=' + contsId); break;
					case "photo"		: window.open('//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/photo.htm?artistId=' + contsId); break;
					default 			: window.open('//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/song/detail.htm?songId=' + contsId); break;
				}
			},
			goComingsoon : function() {
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/new/comingsoon/index.htm';
			},
			/**
			 * 검색 로그 후 로직 수행
			 * w		검색영역	- web_song, web_album, web_artist, web_video, web_lyric ...
			 * coll		플레이리스트명	- SONG, ALBUM, ARTIST, VIDEO, LYRIC
			 * cpath	클릭경로	- SO:곡, AL:앨범, AR:아티스트, MV:뮤비, LY:가사 (예 - 곡검색에서 아티스트를 클릭하면 AR, 곡을 클릭하면 SO)
			 * srch_wd	검색어	- 사용자가 입력어 검색어
			 * doc_id	문서ID	- 사용자가 클릭한 해당 플레이리스트의 대표성 아이디(예- 곡검색의 아티스트명을 클릭하면 doc_id는 곡id, 앨범검색에서 아티스트 상세를 클릭할 경우 doc_id는 앨범 id)
			 *
			 */
			goSearchLog : function(w, coll, cpath, srch_wd, doc_id, formId){
				// 서치 로그 주석 처리 - 2020.06.23 / MELONSVC-2231 / eric.sun


				/*var param;

				var docIds = new Array();

				$('#'+formId).find("input[name='input_check']:checked").each(function(){
					if (!isNaN(this.value)) {
						docIds.push($(this).val());
					}
				});

				if(doc_id == '') doc_id = docIds;

				param =  "c_w=" + w;
				param += "&c_coll=" + coll
				param += "&c_cpath=" + cpath;
				param += "&c_srchwd=" + encodeURIComponent(encodeURIComponent(srch_wd));
				param += "&c_docid=" + doc_id;

				var url = "https://"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/searchlog/writer.json?" + param;
				$.ajax({
					url: url,
					jsonpCallback: "callBackResponse",
					dataType: "jsonp",
					type: "POST",
					contentType: "application/json; charset=UTF-8",
					scriptCharset: "UTF-8",
					cache: false,
					jsonp: 'jscallback'
				});*/
			},
			/**
			 * 멜론 DJ  바로가기
			 */
			goDjtoday : function() {
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/dj/today/djtoday_list.htm';
			},
			goMyMusicManySong : function(yyyyMM) {
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/top/mymusictopmanysong_list.htm?memberKey='+getMemberKey()+'&searchDate='+yyyyMM;
			},
			/*아티스트의 포토탭 */
			goPhotoDetail : function(artistId, photoId) {
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/photo.htm?artistId=' + artistId + "&photoId=" + photoId;
			},
			/*아티스트 포토 바닦상세 */
			goPhotoBtmDetail : function(artistId, photoId, orderBy) {
				if(typeof orderBy == "undefined") orderBy = "";
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/artist/photo_detail.htm?artistId=' + artistId + "&photoId=" + photoId + "&orderBy=" + orderBy;
			},
			/* 나우플레잉 */
			goNowPlayingDetail : function(nowPlaySeq) {
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/nowplaying/detail.htm?nowPlaySeq=' + nowPlaySeq;
			},
			/* 스토리 */
			goStoryDetail : function(storySeq) {
				location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/story/detail.htm?storySeq=' + storySeq;
			},
			/* 테마 */
			goThemeDetail : function(themeSeq, contsTypeCode, contsId) {
				var url = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/theme/detail.htm?themeSeq=' + themeSeq;

				if(typeof contsTypeCode != "undefined"){
					url += "&contsTypeCode=" + contsTypeCode;
				}
				if(typeof contsId != "undefined"){
					url += "&contsId=" + contsId;
				}

				location.href = url;
			},
			/**
			 * 뮤직스토리 상세 이동
			 *
			 * @function
			 * @param mstorySeq : 뮤직스토리 ID
			 */
			goMstoryDetail : function(mstorySeq, cateObj, startIndex, musicToday) {
				if(typeof mstorySeq == "undefined") return;
				var redUrl = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com") + '/musicstory/inform.htm?mstorySeq=' + mstorySeq;

				if(typeof startIndex != 'undefined'){
					redUrl += '&startIndex=' + startIndex;
				}

				if(typeof musicToday != 'undefined'){
					redUrl += '&musicToday=' + musicToday;
				}

				if(typeof cateObj == 'undefined'){
					redUrl += '&expose=true';
				}else if(!$(cateObj).hasClass('on')){
					redUrl += '&expose=false';
				}
				location.href =  redUrl;
			},

			/**
			 * 뮤직스토리 카테고리 이동
			 *
			 * @function
			 * @param mstorySeq : 뮤직스토리 카테 ID
			 */
			goMstoryCateDetail : function(mstoryCateSeq, cateObj, startIndex){
				if(typeof mstoryCateSeq == "undefined") return;
				var redUrl = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com") + '/musicstory/index.htm?mstoryCateSeq=' + mstoryCateSeq;

				if(typeof startIndex != 'undefined'){
					redUrl += '&pageIndex=' + startIndex;
				}

				if(typeof cateObj == 'undefined'){
					redUrl += '&expose=true';
				}else if(!$(cateObj).hasClass('on')){
					redUrl += '&expose=false';
				}
				location.href = redUrl;
			},

			/**
			 * 연예뉴스 상세 이동
			 *
			 * @function
			 * @param entnewsSeq : 뉴스ID
			 */
			goEntNewsDetail : function(entnewsSeq, cateObj, startIndex, searchWord){
				if(typeof entnewsSeq == "undefined") return;
				var redUrl = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com") + '/musicstory/entnews/inform.htm?entnewsSeq=' + entnewsSeq;

				if(typeof startIndex != 'undefined'){
					redUrl += '&startIndex=' + startIndex;
				}

				if(typeof searchWord != 'undefined'){
					redUrl += '&searchWord=' + searchWord;
				}

				if(typeof cateObj == 'undefined'){
					redUrl += '&expose=true';
				}else if(!$(cateObj).hasClass('on')){
					redUrl += '&expose=false';
				}
				location.href = redUrl;
			},

			/**
			 * 연예뉴스 리스트 이동
			 *
			 * @function
			 * @param cateObj : 메뉴 열고 닫힘상태를 체크할 수 있는 obj
			 * @param searchWord : 검색어
			 * @param startIndex : 이동할 시작 페이지
			 */
			goEntNewsList : function(cateObj, startIndex, searchWord){
				var redUrl = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com") + '/musicstory/entnews/index.htm';

				if(typeof startIndex != 'undefined'){
					redUrl += '?pageIndex=' + startIndex;
				}else{
					redUrl += '?pageIndex=1';
				}

				if(typeof searchWord != 'undefined'){
					redUrl += '&searchWord=' + searchWord;
				}

				if(typeof cateObj == 'undefined'){
					redUrl += '&expose=true';
				}else if(!$(cateObj).hasClass('on')){
					redUrl += '&expose=false';
				}
				location.href = redUrl;
			},

			/**
			 * 멜론 아티스트 샵 - 새창으로
			 * [OP2015-2073]
			 */
			goArtistShop : function(artistId, menuId){
				if(typeof artistId == "undefined") return;
				var redUrl = 'http://store.melon.com/api/gate.htm?type=artist&param='+artistId+"&pocId="+MELON.WEBSVC.POC.getPocId()+"&menuId="+menuId;
				window.open(redUrl, '_blank');
			},

			/**
			 * 멜론 샵 상세페이지 - 새창으로
			 * [OP2015-2073]
			 */
			goMelonShopDetail : function(redUrl, minorBuyPosblYn){
				if(typeof redUrl == "undefined") return;
				if(typeof minorBuyPosblYn == "undefined") minorBuyPosblYn = 'Y';

				//19금-관련 체크
				if(minorBuyPosblYn == 'N') {
					//로그인 체크
					if(!isMelonLogin()) {
						//19금 컨텐츠 안내팝업
						alert("이 정보내용은 청소년유해매체물로서 「정보통신망 이용촉진 및 정보보호 등에 관한 법률」 및 「청소년 보호법」 에 따라 19세 미만의 청소년이 이용할 수 없습니다.\n확인을 위해 먼저 로그인 하세요.");
						//MELON.WEBSVC.alert('이 정보내용은 청소년유해매체물로서 「정보통신망 이용촉진 및 정보보호 등에 관한 법률」 및 「청소년 보호법」 에 따라 19세 미만의 청소년이 이용할 수 없습니다.\n확인을 위해 먼저 로그인 하세요.');
						MELON.WEBSVC.POC.login.loginPopupLayerd('');
					} else {

						var memberAuthInfo = getMemberAuthInfo();
						//성인인증 판단
						var memberAuthFlg = '0';

						if(memberAuthInfo != null){
							memberAuthFlg = memberAuthInfo.ADULTAUTHFLG;
						}

						switch (memberAuthFlg) {
							case '1':
								window.open(redUrl, '_blank');
								break;
							case '0':
							case '2':
								if(!confirm("이 정보내용은 청소년 유해매체물로서 「정보통신이용촉진 및 정보보호 등에 관한 법률」 및 「청소년 보호법」에  따라 19세 미만의 청소년이 이용할 수 없습니다.\n성인인증 후 이용해주세요.")) return;
								niceAuthPop('nineteen','Y','','',true,'01');
								break;
							case '3':
							case '4':
								//미성녕회원
								alert("이 정보내용은 청소년유해매체물로서 「정보통신망 이용촉진 및 정보보호 등에 관한 법률」 및 「청소년 보호법」 에 따라 19세 미만의 청소년이 이용할 수 없습니다");
								break;

							default:
								alert("이 정보내용은 청소년유해매체물로서 「정보통신망 이용촉진 및 정보보호 등에 관한 법률」 및 「청소년 보호법」 에 따라 19세 미만의 청소년이 이용할 수 없습니다");
								break;
						}
						//niceAuthPop('juvenileProtection','','reloadVideoPage()','',true,'01');
						//niceAuthPop('nineteen','Y','','',true,'01');
					}
				} else {
					window.open(redUrl, '_blank');
				}
			},

			/**
			 * 앱실행 후 앱스키마실행(실패시 앱스토어로 이동)
			 *
			 * @param urlScheme : scheme url ( String 필수)
			 * @param options : launchedby, ref (Json Object ex. {launchedby : 'aaa', ref : 'bbb'} 옵션값)
			 * @examples
			 * ex. 옵션이 있는 경우 : MELON.WEBSVC.POC.link.ipadAppLaunch(urlScheme, {launchedby : 'aaa', ref : 'bbb'});
			 * ex. 옵션이 없는 경우 : MELON.WEBSVC.POC.link.ipadAppLaunch(urlScheme);
			 */
			ipadAppLaunch : function(urlScheme, options){

				var appleStore =  "https://itunes.apple.com/kr/app/mellon-melon-for-ipad/id416760693?mt=8";
				if(urlScheme == null || urlScheme == "" || (MELON.WEBSVC.POC.getPocId() != 'IT10' && !MELON.WEBSVC.POC.isIPad())) return;

				if(typeof options == 'object'){
					var launchedby = options.launchedby;
					var ref        = options.ref;
					//launchedBy, ref 값이 있는 경우
					if(typeof launchedby != 'undefined' && launchedby != '' && launchedby != null){
						urlScheme += '&launchedby=' + launchedby;
					}
					if(typeof ref != 'undefined' && ref != '' && ref != null){
						urlScheme += '&ref=' + ref;
					}
				}

				location.href = urlScheme;

				var entryTime = +new Date;
				setTimeout(function() {
					//앱이 설치되지 않았을 때 동작.
					if (+new Date - entryTime < 2500){
						window.location.replace( appleStore );
						return;
					}
				}, 2000);
				return;
			}

		},

		buy : {
			 /**
	         * 상품(곡, 앨범, 어학)을 직접 구매 및 이용한다.
	         * @param formName 		폼이름 			: 폼이름을 String으로 넘긴다. ex) 'testForm'
	         * @param contsId 		컨텐츠 아이디ID 	: 곡이나 앨범, 어학등의 컨텐츠 아이디(앨범은 앨범아이디)
	         * @param contsType		컨텐츠 타입		: 곡(3C0001),어학(3C0003),뮤비(3C0002), 앨범(3B0001) 등의 컨텐츠 구별값
	         * @param paramsName 	파라미터명		: 여러곡을 선택후 다운로드를 진행시 상품을 가진 checkBox이름
	         * @param buyType		구매형태			: 0 - 직접구매, 1 - 직접선물 , 2-선물함에서다운로드, 3-내목록(MP3상품)에서 온경우, 4-내목록(DCF상품)에서 온 경우,5-내목록(개별곡)에서 온경우 , 6-뮤직비디오에서 온경우,10-배열로 받아서 처리하는경우(탑10다운로드)
	         *                                          100 - FLAC 전용관 다운로드
	         * @param meuId 		메뉴아이디		: 메뉴아이디
	         * @param exceptAll     앨범전체다운로드  : 앨범아이디만 받아 앨범구매가 아니라 앨범 전체 다운로드 처리하게 하기 위한 값  '1' 로 설정하면됨.
	         *
	         * ex) goBuyProduct('testForm', ''		, '3C0001'	,'song_id_chk'	, '0', '128') - 다중곡을 다운로드 할 경우
	         *	   goBuyProduct('testForm', '1111'	, '3C0001'	,''				, '0', '128') - 하나의 곡을 다운로드 할 경우
	         *	   goBuyProduct('testForm', '1000'	, '3B0001'	,''				, '0', '128') - 하나의 앨범을 구매 할 경우(앨범판매가능대상만!!! )
	         *	   goBuyProduct('testForm', '1000'	, '3B0001'	,''				, '0', '128','1') - 하나의 앨범을 전곡 다운로드 할 경우 (앨범구매가 아닌 해당앨범 전체곡)
	         *
	         * !!! 앨범의 경우는 contsId 에 바로 앨범아이디를 넣는 형태로 처리하면된다. (paramsName 지정 필요 없이...)
	         *
	         * 부가설명
	         * POC 에서 다운로드를 위해 호출하는 시작점
	         * formName 	: POC 페이지에서 다운로드 리스트가 들어있는 form의 이름
	         * paramsName 	: 위의 formName 안에 있는 컨텐츠의 배열 변수명
	         * contsType 	: 컨텐츠에 따른 구분자 값(곡,어학,뮤비,앨범... 등에 대한 구분값)
	         * menuId		: 해당 POC 페이지의 메뉴아이디값
	         *
	         * 1. 체크박스 선택후 다운로드시에 필요한데이터
	         * formName,paramsName,contsType,buyType,menuId
	         *
	         * 2. 곡 오른쪽에 있는 다운로드 버튼 클릭시
	         * formName,contsId,buyType,contsType,menuId
	         */
			goBuyProduct : function(formName,contsId,contsType,paramsName,buyType,menuId,exceptAll){

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}

				if(isMelonLogin()){
					MELON.WEBSVC.CM.CONT.goBuyProduct(formName,contsId,contsType,paramsName,buyType,menuId,exceptAll);
				}else{
					MELON.WEBSVC.POC.login.loginCheckFuncCall();
				}
			},
			goBuyProductByPlylst : function(contsId,menuId){

				// 플레이 시 Tablet의 경우 무조건 팝업띄움 OP2015-7472[SR] Tablet 내 PC web 이용시 안내팝업
				if(MELON.WEBSVC.POC.isTablet()){
					MELON.WEBSVC.POC.tabletGuidePop();
					return;
				}

				if(isMelonLogin()){
					$.ajax({
						type: "POST",
						url: "/mymusic/common/mymusiccommon_listPlaylistSongIds.json",
						data: {plylstSeq : contsId},
						dataType: 'json',
						async: false,
						success: function(data) {
							var songList = data.songIds;
							if(document.plylstSongList != undefined){
								document.body.removeChild(document.plylstSongList);
							}
							if(data.songIds !=null && songList.length > 0){
								var form = '';
								if(MELON.WEBSVC.browser.isIE && MELON.WEBSVC.browser.version < 8){
									form = document.createElement("<form name='plylstSongList' style='display:none;'>");
						     		for(var key in songList){
						     			var hiddenField = document.createElement("<input type='checkbox' name='song_id_chk' checked='checked' style='display:none;' value='"+songList[key]+"'>");
						     			form.appendChild(hiddenField);
						     		}
								}else{
									form = document.createElement("form");
						     		form.setAttribute("name",'plylstSongList');
						     		form.setAttribute("style", "display:none");
						     		for(var key in songList){
						     			var hiddenField = document.createElement("input");
						     			hiddenField.setAttribute("type","checkbox");
						     			hiddenField.setAttribute("name",'song_id_chk');
						     			hiddenField.setAttribute("checked",true);
						     			hiddenField.setAttribute("value", songList[key]);
						     			hiddenField.setAttribute("style", "display:none");
						     			form.appendChild(hiddenField);
						     		}
								}
					     		document.body.appendChild(form);
					     		MELON.WEBSVC.CM.CONT.goBuyProduct('plylstSongList', '', '3C0001', 'song_id_chk', '0', menuId,'');
							}else{
								alert("다운로드 가능한 곡이 없습니다.");
								return;
							}
						}
					});
				}else{
					MELON.WEBSVC.POC.login.loginCheckFuncCall();
				}
			},
			goPresentOnlyOne : function(type,contsId, menuId){
				// 로그인 체크
				if(!MELON.WEBSVC.POC.login.isMelonLogin()) {
					//MELON.WEBSVC.POC.login.loginPopupLayerd(url); 리턴url이 아니기 때문에 url 삭제
					MELON.WEBSVC.POC.login.loginPopupLayerd('');
					return;
				}

				if(!confirm('해당 곡을 선물 하시겠습니까?')){
					return;
				}


				location.href = '/mymusic/messagepresent/mymusicpresent_insert.htm?songIds='+contsId+'&menuId='+menuId;
			},
			goPresentForAlbum : function(albumId,formId,menuId){
				// 로그인 체크
				if(!MELON.WEBSVC.POC.login.isMelonLogin()) {
					//MELON.WEBSVC.POC.login.loginPopupLayerd(url); 리턴url이 아니기 때문에 url 삭제
					MELON.WEBSVC.POC.login.loginPopupLayerd('');
					return;
				}

				if(albumId==''){
					alert("앨범을 선택해 주세요.");
					return;
				}

				var contsList = new Array();
				var songIds = "";
				if(formId != null && formId != ''){
					$('#'+formId).find('.input_check').each(function(){
						if (!isNaN($(this).val())) {
							contsList.push($(this).val());
						}
					});
				} else {
					$.ajax({
						type: "POST",
						url: "/album/listAlbumSong.json",
						data: {albumId : albumId},
						dataType: 'json',
						async: false,
						success: function(data) {
							for(var key in data.songList){
								contsList.push(data.songList[key].SONGID);
							}
						}
					});
				}

				if(contsList==''){
					alert("선물 가능한 수록곡이 없습니다.");
					return;
				}

				if(menuId==''){
					alert("메뉴아이디가 존재하지 않습니다.");
					return;
				}

				if(!confirm('앨범을 선물 하시겠습니까?')){
					return;
				}

				if(contsList.length > 50){
					alert('한 번에 최대 50곡까지만 선물 가능합니다.');
					return;
				}
				params = {'songIds':contsList.join(),'menuId':menuId}
				method = "POST";
				var form = document.createElement("form");
				form.setAttribute("method",method);
				form.setAttribute("action", "/mymusic/messagepresent/mymusicpresent_insert.htm");
				for(var key in params){
					var hiddenField = document.createElement("input");
					hiddenField.setAttribute("type","hidden");
					hiddenField.setAttribute("name",key);
					hiddenField.setAttribute("value", params[key]);
					form.appendChild(hiddenField);
				}
				document.body.appendChild(form);
				form.submit();
			},
			goPresent : function(type,formId,menuId){
				// 로그인 체크
				if(!MELON.WEBSVC.POC.login.isMelonLogin()) {
					//MELON.WEBSVC.POC.login.loginPopupLayerd(url); 리턴url이 아니기 때문에 url 삭제
					MELON.WEBSVC.POC.login.loginPopupLayerd('');
					return;
				}

				var str = "";
				var count = 0;
				if(type=="song"){
					str = "곡을";
				}else{
					alert('추후 적용될 예정입니다.');
					return;
				}

				var contsList = new Array();
				var songIds = "";
				$('#'+formId).find('.input_check:checked').each(function(){
					if (!isNaN($(this).val())) {
						contsList.push($(this).val());
						count++;
					}
				});

				if(contsList==''){
					alert(str+" 선택해 주세요.");
					return;
				}

				if(menuId==''){
					alert("메뉴아이디가 존재하지 않습니다.");
					return;
				}

				if(!confirm(count+'개의 '+str+' 선물 하시겠습니까?')){
					return;
				}

				if(contsList.length > 50){
					alert('한 번에 최대 50곡까지만 선물 가능합니다.');
					return;
				}
				params = {'songIds':contsList.join(),'menuId':menuId}
				method = "POST";
				var form = document.createElement("form");
				form.setAttribute("method",method);
				form.setAttribute("action", "/mymusic/messagepresent/mymusicpresent_insert.htm");
				for(var key in params){
					var hiddenField = document.createElement("input");
					hiddenField.setAttribute("type","hidden");
					hiddenField.setAttribute("name",key);
					hiddenField.setAttribute("value", params[key]);
					form.appendChild(hiddenField);
				}
				document.body.appendChild(form);
				form.submit();
			},
			/**
			 * 폰 꾸미기 - 컬러링,벨소리,컷팅벨,동영상벨 open
			 * @param songId
			 * @param tumsFlg
			 */
			popPhoneDecorate : function(tumsFlg,songId){
				if (!isMelonLogin()) {
					MELON.WEBSVC.POC.login.loginPopupLayerd();
					return;
				}
				if(songId == 0 || typeof songId == "undefined" || songId == "")
				{
				    alert("곡아이디가 없습니다.");
					return;
				}
				var URL = 'http://decop.melon.com/3.0/player/decop_player.jsp?p_tumsFlg='+tumsFlg+'&p_songId='+songId+'&truepage='+'http://decop.melon.com/3.0/gnb2/popupBox/phone_deco_p.jsp%3Fp_songId='+songId+'%26p_tumsFlg='+tumsFlg;
				show=window.open(URL,'phone','height=330,width=452,scrollbars=yes');
				show.focus();
			}
		},

		login : {
			/**
			 * 로그인 체크 후 메서드 수행
			 * 파라미터는 수행할함수명, 수행할함수의 파라미터순 (개수 제한 없음.).
			 */
			loginCheckFuncCall : function(methodName){
				var iFuncName = 0;
			    var iParamStart = 1;

				var isLogin = isMelonLogin();
				if(isLogin){
					var param = "";
			        var cmd = "";
			        for(var i=iParamStart; i<arguments.length;i++){
			            param+="arguments["+i+"]";
			            if(i+1<arguments.length){
			                param+=",";
			            }
			        }
			        cmd=arguments[iFuncName]+"("+param+")";
			        eval(cmd);
				}else{
					// 로그인 레이어페이지 호출
					MELON.WEBSVC.POC.login.loginPopupLayerd();

				}
			},
			/**
			 * type : 1|팝업, 2|페이지전환, undefined|팝업
			 */
			loginPopup : function(type){
				var popUrl = "";
				var urlOpt = "";
				if(!type){
					window.name = "_OPENER_LOGIN_WINDOW";
					popUrl = "https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/login/loginpopup_inform.htm";
					urlOpt = "scrollbars=no, resizable=yes,location=no, width=560,height=419, left=20, top=20";
					window.open(popUrl, "_LOGIN_POPUP", urlOpt);
				}else if(type=="1"){
					window.name = "_OPENER_LOGIN_WINDOW";
					popUrl = "https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/login/loginpopup_inform.htm";
					urlOpt = "scrollbars=no, resizable=yes,location=no, width=560,height=419, left=20, top=20";
					window.open(popUrl, "_LOGIN_POPUP", urlOpt);
				}else if(type=="2"){
					popUrl = "https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/login/loginpopup_inform.htm";
					location.href = popUrl;
				}

			},
			/**
			 * 로그인 레이어
			 * @function
			 * @name MELON.WEBSVC.POC.login.loginPopupLayerd
			 * @param {String} returnPage  리다이렉트 url
			 * @examples
			 * MELON.WEBSVC.POC.login.loginPopupLayerd('http://www.melon.com');
			 */
			loginPopupLayerd : function(returnPage){
				//레이어 로그인 사용하지 않음 메뉴 로그인으로 전환
				MELON.WEBSVC.POC.login.menuLogin(returnPage);
				// // 로그인 레이어페이지 호출
				// $.ajax({
				// 	url: '/muid/web/login/loginlayer_inform.htm',
				// 	data: {returnPage: returnPage}
				// }).done(function(html){
				// 	$(html).appendTo('body').modal({
				// 		modal: true,
				// 		clone: true,
				// 		containerCss:{
				// 			backgroundColor: '#fffff'
				// 		},
				// 		removeOnClose: true
				// 	}).find('input[name=returnPage]').val(returnPage || location.href);
				//
				// 	// loginlayer 화면의 init함수 호출.
				// 	try{
				// 		if( $( "script[src='resource/script/muid/web/memberAlertMsg.js']" ).length == 0
				// 				&& $( "script[src='https://member.melon.com/resource/script/muid/web/memberAlertMsg.js']" ).length == 0 ){
				// 			var memAlertJsStr = '<script type="text/javascript" src="https://member.melon.com/resource/script/muid/web/memberAlertMsg.js"></script>';
				// 			$( memAlertJsStr ).appendTo("body");
				// 		}
				// 		if( $( "script[src='/resource/script/muid/web/memberFunc.js']" ).length == 0
				// 				&& $( "script[src='https://member.melon.com/resource/script/muid/web/memberFunc.js']" ).length == 0 ){
				// 			var memFuncJsStr = "<script type='text/javascript' src='https://member.melon.com/resource/script/muid/web/memberFunc.js'></script>";
				// 			$( memFuncJsStr ).appendTo("body");
				// 		}
				// 		 $('input[placeholder]').placeholder({});
				// 	}catch(e){
				// 		// do nothing
				// 	}
				//});
			},
			/**
			 * 로그인 레이어 ( MMA 용 openLib.js 사용 제거를 위해 draggable 속성을 false 로 처리 )
			 * @function
			 * @name MELON.WEBSVC.POC.login.loginPopupLayerdMMA
			 * @param {String} returnPage  리다이렉트 url
			 * @examples
			 * MELON.WEBSVC.POC.login.loginPopupLayerdMMA('http://www.melon.com');
			 */
			loginPopupLayerdMMA : function(returnPage){

				// 로그인 레이어페이지 호출
				$.ajax({
					url: '/muid/web/login/loginlayer_inform.htm',
					data: {returnPage: returnPage}
				}).done(function(html){
					$(html).appendTo('body').modal({
						modal: true,
						clone: true,
						draggable: false,
						containerCss:{
							backgroundColor: '#fffff'
						},
						removeOnClose: true
					}).find('input[name=returnPage]').val(returnPage || location.href);

					// loginlayer 화면의 init함수 호출.
					try{
						if( $( "script[src='/resource/script/muid/web/memberAlertMsg.js']" ).length == 0
								&& $( "script[src='https://member.melon.com/resource/script/muid/web/memberAlertMsg.js']" ).length == 0 ){
							var memAlertJsStr = '<script type="text/javascript" src="https://member.melon.com/resource/script/muid/web/memberAlertMsg.js"></script>';
							$( memAlertJsStr ).appendTo("body");
						}
						if( $( "script[src='/resource/script/muid/web/memberFunc.js']" ).length == 0
								&& $( "script[src='https://member.melon.com/resource/script/muid/web/memberFunc.js']" ).length == 0 ){
							var memFuncJsStr = "<script type='text/javascript' src='https://member.melon.com/resource/script/muid/web/memberFunc.js'></script>";
							$( memFuncJsStr ).appendTo("body");
						}
						 $('input[placeholder]').placeholder({});
					}catch(e){
						// do nothing
					}

				});
			},
			isMelonLogin : function(){
				return isMelonLogin();
			},
			gnbLogin : function(){
				var loginBoxIdx = 0;
				if($("#gnbLoginDiv").children().eq(1).css("display")=="block"){
					loginBoxIdx = 1;
				}

				var id = $("#gnbLoginDiv").children().eq(loginBoxIdx).find("input[name=memberId]").val();
				var pwd = $("#gnbLoginDiv").children().eq(loginBoxIdx).find("input[name=memberPwd]").val();
				var saveId = $("#gnbLoginDiv").children().eq(loginBoxIdx).find("input[name=saveId]").prop("checked") ? "Y" : "N";

				// 아이디확인
				if(id =="" || id =="아이디" ){
					alert('아이디를 입력해 주세요.');
					return false;
				}
				// 비밀번호 확인
				if(pwd =="" ){
					alert('비밀번호를 입력해 주세요.');
					return false;
				}

				var loginFrm = $('<form method="post" name="gnbLoginFrm"></form>');
				loginFrm.appendTo('body');

				var returnURL = document.location.href;
				returnURL = encodeURIComponent(returnURL);


				if(typeof(zamLoginPropertyCheck) == 'undefined'){
					var loginRSA;
					try {
						loginRSA = new AuthRSA();

						loginRSA.execute(function(p,e){
							loginFrm.append('<input type="hidden" id="memberId" name="memberId" value="'+loginRSA.encrypt(id)+'">');
							loginFrm.append('<input type="hidden" id="memberPwd" name="memberPwd" value="'+loginRSA.encrypt(pwd)+'">');
							loginFrm.append('<input type="hidden" id="publicKey" name="publicKey" value="'+p+'">');
							loginFrm.append('<input type="hidden" id="saveId" name="saveId" value="'+saveId+'">');

							//loginFrm.append($("#gnbLoginDiv").children().eq(loginBoxIdx).find("input").clone());
							//loginFrm.find("input[name=saveId]").val( loginFrm.find("input[name=saveId]").prop("checked")?"Y":"N" );
							loginFrm.prop("action" ,"https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/login/login_informProcs.htm?returnPage="+returnURL);
							loginFrm.submit();
						});
					} catch(e) {
						loginFrm.append('<input type="hidden" id="memberId" name="memberId" value="'+id+'">');
						loginFrm.append('<input type="hidden" id="memberPwd" name="memberPwd" value="'+pwd+'">');

						loginFrm.append('<input type="hidden" id="saveId" name="saveId" value="'+saveId+'">');

						//loginFrm.append($("#gnbLoginDiv").children().eq(loginBoxIdx).find("input").clone());
						//loginFrm.find("input[name=saveId]").val( loginFrm.find("input[name=saveId]").prop("checked")?"Y":"N" );
						loginFrm.prop("action" ,"https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/login/login_informProcs.htm?returnPage="+returnURL);
						loginFrm.submit();
					}
				}else{
					zamLoginPropertyCheck(id, pwd, saveId);
				}
			},

			gnbLogout : function(){
				window.localStorage.removeItem('promotionpopup'+getMemberKey());
				logout();
			},
			menuLogin : function(returnPage){

				if(returnPage == null || returnPage == ''){
					returnPage = location.href;
				}
				var loginFrm = $('<form method="post" name="menuLoginFrm"></form>');
				loginFrm.appendTo('body');

				var inputReturnPage = $('<input />');
				inputReturnPage.attr("name", "returnPage");
				inputReturnPage.attr("value", returnPage);
				inputReturnPage.appendTo(loginFrm);

				loginFrm.attr("action" ,"https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/login/login_inform.htm");
				loginFrm.submit();
			},
			menuLoginWithReqType : function(returnPage, reqType){
				if(returnPage == null || returnPage == ''){
					returnPage = location.href;
					//location.href = "https://www.melon.com/muid/web/login/login_inform.htm";
				}
				var loginFrm = $('<form method="post" name="menuLoginFrm"></form>');
				loginFrm.appendTo('body');

				var inputReturnPage = $('<input />');
				inputReturnPage.attr("name", "returnPage");
				inputReturnPage.attr("value", returnPage);
				inputReturnPage.appendTo(loginFrm);

				var inputReqType = $('<input />');
				inputReqType.attr("name", "reqType");
				inputReqType.attr("value", reqType); //"TYPE01" : 회원에서 로그인 후 memberKey를 파라메터로 붙여준다.
				inputReqType.appendTo(loginFrm);

				loginFrm.attr("action" ,"https://"+MELON.WEBSVC.POC.serverDeployPhase("member.melon.com")+"/muid/web/login/login_inform.htm");
				loginFrm.submit();
			}
		},
		logout : function(loginType){
			window.localStorage.removeItem('promotionpopup'+getMemberKey());
			var logoutReturnUrl = window.location.href;
			if(logoutReturnUrl == ''){
				logoutReturnUrl = 'www.melon.com';
			}
			logout(loginType, logoutReturnUrl)
		},

		menu : {
			goMyMusicMain : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/main/mymusicmain_list.htm?memberKey=' + getMemberKey();
				} else {
          MELON.WEBSVC.POC.login.menuLoginWithReqType('https://'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/main/mymusicmain_list.htm', 'TYPE01');
					return;
				}
			},
			goMyMusicLike : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/like/mymusiclikesong_list.htm?memberKey=' + getMemberKey();
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyMusicPlayList : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/playlist/mymusicplaylist_list.htm?memberKey=' + getMemberKey();
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyMusicDjCollection : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/djcollection/mymusiccollectiondj_list.htm?memberKey=' + getMemberKey();
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyMusicRecentSong : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/recent/mymusicplaylistrecentsong_list.htm?memberKey=' + getMemberKey();
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyMusicManySong : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/top/mymusicplaylistmanysong_list.htm?memberKey=' + getMemberKey();
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyMusicFanSignArtist : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/artistfan/mymusicartistfan_list.htm?memberKey=' + getMemberKey();
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyMusicFriend : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/friend/mymusicfriendmusicchart_list.htm?memberKey=' + getMemberKey();
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyMusicMyFriend : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/mymusic/friend/mymusicfriend_list.htm?memberKey=' + getMemberKey();
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyMusicMessage : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href="//"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/mymusic/messagepresent/mymusicmessage_list.htm";
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goDjRegister : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/dj/djregister/djregister_inform.htm';
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyPage : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/commerce/mypage/product/web/producthistory_listCurUserProdView.htm';
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goMyPageAddCash : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					window.open(httpsWww + '/buy/meloncash/charge.htm', 'melonCash','app_, width=645, height=612, status=no, toolbar=no, scrollbars=yes');
				} else {
					MELON.WEBSVC.POC.login.menuLogin();
					return;
				}
			},
			goFeed : function(){
				if(MELON.WEBSVC.POC.login.isMelonLogin()){
					location.href = '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/feed/index.htm';
				} else {
					MELON.WEBSVC.POC.login.menuLogin('https://'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/feed/index.htm');
					return;
				}
			},
			cm : {
				goPamphlet : function(){
					location.href = this.getPamphletUrl();
				},
				getPamphletUrl : function(){
					return '//'+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+'/commerce/pamphlet/web/sale_listMainView.htm';
				}
			}
		},

		sns : {
			postFacebook : function(param){
				var memberKey = param.memberKey;
				var type = param.type;
				var contsId = param.contsId;
				var message = param.message;
				var menuId = param.menuId;
				if(menuId == undefined || menuId == "undefined"){
					menuId = '';
				}

				if(type == 'son') type = 'sonDft';
				else if(type == 'alb') type = 'albDft';
				else if(type == 'art') type = 'artDft';

				var url = "https://"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + ".htm";
				if(type == 'ply' || type == 'oab' || type == 'apl' || type == 'djm'  || type == 'djc'){

					$.ajax({
						type : 'POST',
						url  : '/sns/snsposting_informPostingEtcData.json',
						data : {type : type, contsId : contsId},
						async: false,
						success : function(result){
							url = "https://"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + "/" + result.memberKey + "/" + result.updtDate + ".htm";
						}
					});
				}

				$.ajax({
					type: "POST",
					url: "/sns/snsposting_postFacebook.json",
					data: {memberKey : memberKey, url: url, message : message},
					dataType: 'json',
					success: function(result) {
						if(result.result == 'SNSOK'){
						//	alert("포스팅 성공");
							// log 남기기 위해  추가함
							var longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId + "&frm=cmt" +"&menuId=" + menuId ;
							melon.sns.getShortenUrl({longUrl: longUrl, type : type, ref : "facebook", contsId : contsId, menuId : menuId});
							melon.sns.outPostingLog("facebook", type, contsId);
						}
						else if(result.result == 'SNSREVOKEDAUTH'){
							alert("Facebook 계정연결의\n유효기간이 만료되었습니다.\nSNS 계정연결에서 계정해제 후 다시 연결해주세요.");
						}
						else{
							alert('Facebook 계정연결을 하여야 합니다.');
						}
					}
				});

			},
			postTwitter : function(param){
				var memberKey = param.memberKey;
				var type = param.type;
				var contsId = param.contsId;
				var message = param.message;
				var menuId = param.menuId;
				if(menuId == undefined || menuId == "undefined"){
					menuId = '';
				}

				var longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId + "&frm=cmt" +"&menuId=" + menuId ;
				var url = melon.sns.getShortenUrl({longUrl: longUrl, type : type, ref : "twitter", contsId : contsId, menuId : menuId});

				$.ajax({
					type: "POST",
					url: "/sns/snsposting_postTwitter.json",
					data: {memberKey : memberKey, url : url, message : message},
					dataType: 'json',
					success: function(result) {
						if(result.result == 'SNSOK'){
						//	alert("포스팅 성공");
							melon.sns.outPostingLog("twitter", type, contsId);
						}
						else{
							alert('트위터 계정연결을 하여야 합니다.');
						}
					}
				});
			},
			facebook : function(param){
				var adjTitle = '';
				var adjDescription = '음악이 필요한 순간, 멜론';
				var strStatus = '';
				var cbUrl = '';

				var type = param.type;
				var contsId = param.contsId;
				var menuId = param.menuId;
				if(menuId == undefined || menuId == "undefined"){
					menuId = '';
				}
				var artistId = param.artistId;
				if(artistId == undefined || artistId == 'undefined'){
					artistId = '';
				}

				var imgUrl = param.imgUrl;
				if(imgUrl == undefined || imgUrl == null || imgUrl == 'undefined'){
					imgUrl = '';
				}

				var subType = param.subType;
				if(subType == undefined || subType == null || subType == 'undefined'){
					subType = '';
				}

				var wwwHome = "https://" + MELON.WEBSVC.POC.serverDeployPhase("www.melon.com");
				var longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId +"&menuId=" + menuId ;
				var fbFeedUrl = "https://"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + ".htm";
				var redirectUrl = "https://"+MELON.WEBSVC.POC.serverDeployPhase("www.melon.com")+"/sns/snsposting_close.htm";
				var defaultImg = "https://cdnimg.melon.co.kr/resource/image/web/default/noAlbum_500_160727.jpg";

				if('son' == type){
					adjTitle = param.songName + ' - ' + param.artistName;
					imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 500);
					//fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/sonDft/" + contsId + ".htm";
				}
				else if('alb' == type){
					adjTitle = param.albumName + ' - ' + param.artistName;
					imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 500);
					//fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/albDft/" + contsId + ".htm";

				}
				else if('art' == type){
					adjTitle = param.artistName ;
					imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 500);
					//fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/artDft/" + contsId + ".htm";
				}
				else if('playlist' == type || 'ply' == type){
					adjTitle = param.playlistName + ' by ' + param.memberNickName;
					var memberKey = param.memberKey;
					var updtDate = param.updtDate;
					var albumImage1Path = param.albumImage1Path;
					if(imgUrl == null || imgUrl == ''){
						if(albumImage1Path == null || albumImage1Path == ''){
							imgUrl = defaultImg;
						}
						else{
							imgUrl = albumImage1Path;
							imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 500);
						}
					}
					else{
						imgUrl = imgUrl.replace('_190', '_org');
					}
					imgUrl = imgUrl + "?tm=" + updtDate;
					//fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + "/" + memberKey+ "/" + updtDate + ".htm
				}
				else if('oalbum' == type || 'oab' == type  || 'djc' == type){
					adjTitle = param.playlistName + ' by ' + param.memberNickName;
					var memberKey = param.memberKey;
					var updtDate = param.updtDate;
					var albumImage1Path = param.albumImage1Path;
					if(imgUrl == null || imgUrl == ''){
						if(albumImage1Path == null || albumImage1Path == ''){
							imgUrl = defaultImg;
						}
						else{
							imgUrl = albumImage1Path;
							imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 500);
						}
					}
					else{
						imgUrl = imgUrl.replace('_190', '_org');
					}
					imgUrl = imgUrl + "?tm=" + updtDate;
					//fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + "/" + memberKey+ "/" + updtDate + ".htm
				}
				else if('pht' ==  type){ // 포토인 경우 포토 아이디 이외에 아티스트 아이디를 넘겨준다(특정 아티스트 상세의 포토로 이동하기 위함)
					adjTitle = param.artistName;
					longUrl  = longUrl + "&artId=" + artistId;

					if(imgUrl == null || imgUrl == ''){
						imgUrl = defaultImg;
					}else if(imgUrl.indexOf('_org') > 0){
						imgUrl = imgUrl.replace('_org', '_500');
					}

//					fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + "/" + artistId + ".htm";
				}
				else if('mvd' ==  type){
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId +"&menuId=" + menuId + "&subType=" + subType ;
					adjTitle = param.mvdName + ' - ' + param.artistName;
					if(imgUrl == null || imgUrl == ''){
						imgUrl = "https://cdnimg.melon.co.kr/resource/image/web/default/noMovie_16x9_640_160727.jpg";
					}else{
						imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 640);
					}

					if('live' == subType){
						fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/mvdLLk/" + contsId + ".htm";
					}
					else{
						fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/mvdVLk/" + contsId + ".htm";
					}
				}
				else if('djm' ==  type){
					adjTitle = param.magaznName + ' by ' + param.magaznNickname;
					var memberKey = '1';
					var updtDate = param.updtDate;

					imgUrl = imgUrl.replace('_220', '_640');
					imgUrl = imgUrl + "?tm=" + updtDate;
					//fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + "/" + memberKey+ "/" + updtDate + ".htm
				}
				else if('mus' == type){
					adjTitle = "[" + param.cateName + "]" + "" + param.mstoryTitle;
					imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, "");
				}
				else if('nws' == type){  //소식함
					adjTitle =  param.message;
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=art&sId=" + artistId +"&menuId=" + menuId ;
					longUrl  = longUrl + "&frm=nws";

					if(imgUrl != null && imgUrl != "" &&  imgUrl.indexOf('/cm/album/images/') > 0){
						imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 500);
					}
					//fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + "/" + artistId + ".htm";
				}
				else if('ntz' == type){
					adjTitle = "멜론 주간 어워드 투표 진행중! 빨리 투표에 참여하세요";
					imgUrl = "https://cdnimg.melon.co.kr/resource/image/web/chart/award_op.jpg";
				}
				else if('apl' == type){
					adjTitle = param.playlistName + ' by ' + param.artistNameWebList;
					var memberKey = param.memberKey;
					var updtDate = param.updtDate;

					imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 500);
					imgUrl = imgUrl + "?tm=" + updtDate;
					//fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + "/" + memberKey+ "/" + updtDate + ".htm
				}
				else if('afr' == type){ //친밀도
					adjTitle =  param.message;
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + artistId +"&menuId=" + menuId ;
					var memberKey 		= param.memberKey;
					var temperature 	= param.temperature;
					var totalUserRank 	= param.totalUserRank;
					var userRank		= param.userRank;
					var isMeArtist		= param.isMeArtist;

					if(temperature == undefined || temperature == 'undefined' || temperature == ''){
						temperature = '0';
					}
					imgUrl = "/resource/image/cds/artist/feel/facebook_" + temperature + ".png";
					if(contsId == null || contsId == '0'){
						contsId = artistId;
					}

//					fbFeedUrl = wwwHome + "/restful/cds/facebook/web/facebook_posting/" + type + "/" + contsId + "/" + memberKey
//								+ "/" + temperature + "/" + totalUserRank + "/" + userRank + "/" + isMeArtist + ".htm";
				}
				else if('thk' == type){
					adjTitle = param.artistName + "님의 THANK YOU  메시지" ;
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId + "&artId=" + artistId  +"&menuId=" + menuId ;
					if(imgUrl == '' || imgUrl.indexOf('noAlbum_') > 0){
						imgUrl = defaultImg;
					}
				}else if('anp' == type){ //나우플레잉
					adjTitle = '#nowplaying ' + '"' + param.review + '"';
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId +"&menuId=" + menuId ;
				}
				else if('atmpt' == type){ //테마포토
					adjTitle = param.artistName;
					longUrl  = longUrl + "&artId=" + artistId + "&subContentId=" + contsId;

					if(imgUrl == null || imgUrl == ''){
						imgUrl = defaultImg;
					}else if(imgUrl.indexOf('_org') > 0){
						imgUrl = imgUrl.replace('_org', '_500');
					}
				}
				else if('atmtv' == type){ //테마 영상
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId +"&menuId=" + menuId + "&subContentId=" + contsId;
					adjTitle = param.mvdName + ' - ' + param.artistName;
					if(imgUrl == null || imgUrl == ''){
						imgUrl = "https://cdnimg.melon.co.kr/resource/image/web/default/noMovie_16x9_640_160727.jpg";
					}else{
						imgUrl  = melon.sns.getImgUrlByWidth(imgUrl, 640);
					}
				}
				else if('atm' == type){ //테마
					adjTitle = param.themeTitle;
				}
				else if('astr' == type){ //스토리
					adjTitle = param.storyTitle;
				}

				if(imgUrl != null && imgUrl != ""){
					if(imgUrl.indexOf("http") < 0 ){
						imgUrl = "https://cdnimg.melon.co.kr" + imgUrl ;
					}
				}

				if(imgUrl.indexOf("noAlbum") > -1 || imgUrl.indexOf("noArtist") > -1 || imgUrl.indexOf("noMovie") > -1 ){
					imgUrl = "https://cdnimg.melon.co.kr/resource/image/cds/common/mobilempoc/default_album.jpg";
				}

				try{
					adjTitle = MELON.WEBSVC.string.unescapeHTML(adjTitle);
				}catch(e){
					//adjTitle 를 그냥 사용..;
				}

				cbUrl = melon.sns.getShortenUrl({longUrl: longUrl, type : type, ref : "facebook", contsId : contsId, menuId : menuId});
				let shareUrl = melon.sns.getShareUrl({title: adjTitle, desc: adjDescription, imgUrl: imgUrl, landingUrl: cbUrl});
				let facebookURL = 'https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(shareUrl);
				// var facebookURL = "https://www.facebook.com/dialog/feed?app_id=357952407588971&display=popup&name=" +encodeURIComponent(adjTitle) +  "&description=" + encodeURIComponent(adjDescription) + "&picture=" + imgUrl + "&link=" + cbUrl + "&redirect_uri=" + redirectUrl + "&caption=www.melon.com";
				melon.sns.outPostingLog("facebook", type, contsId);

				window.open(facebookURL, 'fbPosting','width=700, height=540, status=no, toolbar=no,resizable=no');
			},

			twitter : function(param){
				var adjTitle = '';
				var strStatus = '';
				var cbUrl = '';

				var type = param.type;
				var contsId = param.contsId;
				var menuId = param.menuId;
				if(menuId == undefined || menuId == "undefined"){
					menuId = '';
				}
				var artistId = param.artistId;
				if(artistId == undefined || artistId == 'undefined'){
					artistId = '';
				}

				var subType = param.subType;
				if(subType == undefined || subType == null || subType == 'undefined'){
					subType = '';
				}

				var longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId +"&menuId=" + menuId ;
				if('son' == type){
					adjTitle = param.songName + ' - ' + param.artistName + ' - 들어보세요.';
				}
				else if('alb' == type){
					adjTitle = param.artistName + '의 '+ param.albumName + ' - 추천합니다.';
				}
				else if('art' == type){
					adjTitle = param.artistName + ' - 좋아합니다.';
				}
				else if('playlist' == type  || 'ply' == type){
					adjTitle = param.playlistName + ' by ' +  param.memberNickName;
				}
				else if('oalbum' == type || 'oab' == type  || 'djc' == type){
					adjTitle = 'DJ 플레이리스트 :: ' + param.playlistName + ' by ' +  param.memberNickName;
				}
				else if('pht' ==  type){
					adjTitle = param.artistName + '의 포토를 좋아합니다.';
					longUrl  = longUrl + "&artId=" + artistId;
				}
				else if('mvd' ==  type){
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId +"&menuId=" + menuId + "&subType=" + subType ;
					adjTitle = param.artistName + '의 ' + param.mvdName + ' - 감상해보세요.';
				}
				else if('djm' ==  type){
					adjTitle = 'DJ 매거진 :: ' + param.magaznName + ' by ' + param.magaznNickname;
				}
				else if('mus' == type){
					adjTitle = "[" + param.cateName + "]" +  param.mstoryTitle;
				}
				else if('nws' ==  type){
//					adjTitle = "`" + param.artistName + "`님이 " + "`" + param.message + "` 보내셨습니다!";
					adjTitle = param.message;
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=art&sId=" + artistId +"&menuId=" + menuId ;
					longUrl  = longUrl + "&frm=nws";
				}
				else if('ntz' == type){
					adjTitle = "멜론 주간 어워드 투표 진행중! 빨리 투표에 참여하세요";
				}
				else if('apl' == type){
					adjTitle = '아티스트 플레이리스트 :: ' +  param.playlistName + ' by ' + param.artistNameWebList;
				}
				else if('afr' == type){ //친밀도
					adjTitle =  param.message;
					//longUrl  = longUrl + "&artId=" + artistId;
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + artistId +"&menuId=" + menuId ;
					if(contsId == null || contsId == '0'){
						contsId = artistId;
					}
				}
				else if('thk' == type){
					adjTitle = param.artistName + "님의 THANK YOU  메시지" ;
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId + "&artId=" + artistId  +"&menuId=" + menuId ;
				}
				else if('anp' == type){
					adjTitle = '#nowplaying ' + '"' + param.review + '"';
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId +"&menuId=" + menuId ;
				}
				else if('atmpt' == type){ //테마포토
					adjTitle = param.artistName;
					longUrl  = longUrl + "&artId=" + artistId + "&subContentId=" + contsId;
				}
				else if('atmtv' == type){ //테마 영상
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId +"&menuId=" + menuId + "&subType=" + subType + "&subContentId=" + contsId;
					adjTitle = param.mvdName + ' - ' + param.artistName;
 				}
				else if('astr' == type){ //스토리
					adjTitle = param.storyTitle;
				}
				else if('atm' == type){ //테마
					adjTitle = param.themeTitle;
				}

				cbUrl = melon.sns.getShortenUrl({longUrl: longUrl, type : type, ref : "twitter", contsId : contsId, menuId : menuId});
				melon.sns.outPostingLog("twitter", type, contsId);

				//strStatus	= "u=" + cbUrl + "&t=" + encodeURIComponent(adjTitle) ;
				try{
					adjTitle = MELON.WEBSVC.string.unescapeHTML(adjTitle);
				}catch(e){
					//adjTitle 를 그냥 사용..;
				}

				// strStatus	= encodeURIComponent(adjTitle + ' ' + cbUrl + ' #Melon');
                // var twitURL = "http://twitter.com/home?status=" + strStatus;
				var twitURL = "http://twitter.com/intent/tweet?text=" + encodeURIComponent(adjTitle) + "&url=" + encodeURIComponent(cbUrl) + "&hashtags=Melon";

				window.open(twitURL);
			},

			cyworld : function(param){
				var adjTitle = '';
				var strStatus = '';
				var cbUrl = '';

				var adjSummary = " ";
				var type = param.type;
				var contsId = param.contsId;
				var menuId = param.menuId;
				if(menuId == undefined || menuId == "undefined"){
					menuId = '';
				}
				var artistId = param.artistId;
				if(artistId == undefined || artistId == 'undefined'){
					artistId = '';
				}
				var longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId  + "&ref=cyworld" +"&menuId=" + menuId;
				if('son' == type){
					adjTitle = param.songName + '-' + param.artistName;

					//앨범명
					if(param.albumName != undefined && param.albumName != ""){
						adjSummary += "[앨범]" + param.albumName;
					}
					//발매일
					if(param.adjDate != undefined && param.adjDate != ""){
						param.adjDate = melon.sns.formatDate(param.adjDate, ".");
						adjSummary += " (발매일 : " + param.adjDate + ")";
					}
				}
				else if('alb' == type){
					adjTitle = param.albumName + '-' + param.artistName;

					//발매일
					if(param.adjDate != undefined && param.adjDate != ""){
						param.adjDate = melon.sns.formatDate(param.adjDate, ".");
						adjSummary += " (발매일 : " + param.adjDate + ")";
					}
				}
				else if('art' == type){
					adjTitle =  param.artistName;

					//국적
					if(param.adjNation != ''){
						adjSummary += "(국적 : " + param.adjNation + ")";
					}
				}
				else if('playlist' == type || 'ply' == type){
					adjTitle = param.playlistName + '-' + param.memberNickName;
					adjSummary = "  ";
				}
				else if('oalbum' == type || 'oab' == type  || 'djc' == type){
					adjTitle = param.playlistName + '-' + param.memberNickName;
					adjSummary = "  ";
				}
				else if('pht' == type){
					adjTitle = param.artistName;
					longUrl  = longUrl + "&artId=" + artistId;
					adjSummary = "  ";
				}
				else if('mvd' == type){
					adjTitle = param.mvdName + '-' + param.artistName;
					adjSummary = "  ";
				}
				else if('djm' == type){
					adjTitle = param.magaznName + "-" + param.magaznNickname;
					adjSummary = "  ";
				}
				else if('mus' == type){
					adjTitle = "[" + param.cateName + "]" + "" + param.mstoryTitle;
					adjSummary = "  ";
				}
				else if('nws' == type){
//					adjTitle = "[" + param.artistName + "님이 보낸 메시지]" + "" + param.message;
					adjTitle = param.message;
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=art&sId=" + contsId +"&menuId=" + menuId ;
					longUrl  = longUrl + "&frm=nws";
					adjSummary = "  ";
				}
				else if('ntz' == type){
					adjTitle = "멜론 주간 어워드 투표 진행중! 빨리 투표에 참여하세요";
					param.imgUrl = "https://cdnimg.melon.co.kr/resource/image/web/chart/award_op.jpg";
					adjSummary = "  ";
				}
				else if('apl' == type){
					adjTitle = param.playlistName + '-' + param.artistNameWebList;
					adjSummary = "  ";
				}

				var imgUrl = param.imgUrl;
				if(imgUrl.indexOf("http") < 0 ){
					imgUrl = "https://cdnimg.melon.co.kr" + imgUrl ;
				}
				var writer = "음악이 필요한 순간, 멜론";

//				melon.sns.getShortenUrl({longUrl: longUrl, type : type, ref : "cyworld"});

				strStatus	= "url=" + encodeURIComponent(longUrl) + "&thumbnail=" + encodeURIComponent(imgUrl) + "&title_nobase64=" + encodeURIComponent(adjTitle) + "&summary_nobase64=" + encodeURIComponent(adjSummary) + "&writer=" +  encodeURIComponent(writer);
				var cyworldURL = "http://csp.cyworld.com/bi/bi_recommend_pop.php?" + strStatus;

				melon.sns.outPostingLog("cyworld", type, contsId);
				window.open(cyworldURL, 'recom_icon_pop', 'width=400,height=364,scrollbars=no,resizable=no' );

			},

			nate : function(param){
				var adjTitle = '';
				var strStatus = '';
				var cbUrl = '';

				var type = param.type;
				var contsId = param.contsId;
				var menuId = param.menuId;
				if(menuId == undefined || menuId == "undefined"){
					menuId = '';
				}
				var artistId = param.artistId;
				if(artistId == undefined || artistId == 'undefined'){
					artistId = '';
				}
				var longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=" + type + "&sId=" + contsId  +"&menuId=" + menuId ;
				if('son' == type){
					adjTitle = param.songName + ' - ' + param.artistName;
				}
				else if('alb' == type){
					adjTitle = param.artistName + '의 '+ param.albumName + ' 좋아합니다!';
				}
				else if('art' == type){
					adjTitle  = param.artistName + ' 좋아합니다!';
				}
				else if('playlist' == type || 'ply' == type){
					adjTitle = param.memberNickName + "의 " + param.playlistName + " 좋아합니다!";
				}
				else if('oalbum' == type || 'oab' == type || 'djc' == type){
					adjTitle = param.memberNickName + "의 " + param.playlistName + " 좋아합니다!";
				}
				else if('pht' == type){
					adjTitle = param.artistName + "의 " + "포토를 좋아합니다!";
					longUrl  = longUrl + "&artId=" + artistId;
				}
				else if('mvd' == type){
					adjTitle = param.artistName + "의 " + param.mvdName + " 좋아합니다!";
				}
				else if('djm' == type){
					adjTitle = param.magaznNickname + "의 " + param.magaznName + " 좋아합니다!";
				}
				else if('mus' == type){
					adjTitle = "[" + param.cateName + "]" + param.mstoryTitle;
				}
				else if('nws' == type){
//					adjTitle = "[" + param.artistName + "님이 보낸 메시지]" + "" + param.message;
					adjTitle =  param.message;
					longUrl = "https://m.app.melon.com/pda/msvc/snsGatePage.jsp?type=art&sId=" + contsId +"&menuId=" + menuId ;
					longUrl  = longUrl + "&frm=nws";
				}
				else if('ntz' == type){
					adjTitle = "멜론 주간 어워드 투표 진행중! 빨리 투표에 참여하세요";
				}
				else if('apl' == type){
					adjTitle = param.artistNameWebList + "의 " + param.playlistName + " 좋아합니다!";
				}
				cbUrl = melon.sns.getShortenUrl({longUrl: longUrl, type : type, ref : "nate", contsId : contsId, menuId : menuId});
				melon.sns.outPostingLog("nate", type, contsId);
				strStatus	= "u=" + cbUrl + "&t=" + encodeURIComponent(adjTitle) ;
				strStatus	= encodeURIComponent(adjTitle + ' ' + cbUrl + ' #MelOn');

				var nateURL = "http://api.nateon.nate.com/web/note/SendNote.do?msg="+encodeURIComponent(adjTitle)+"&lurl="+encodeURIComponent(cbUrl);
				window.open(nateURL, "note", "width=500,height=540,scrollbars=no,resizable=no");
			},

			getShortenUrl: function (param) {
				var url			= "/sns/snsposting_informShortenUrl.json";
				if(param != null && param.ref != null && param.ref != undefined){
					url += "?ref=" + param.ref;
					param.longUrl += "&ref=" + param.ref;
				}
				//outposting 시  url에 type 추가
				if(param != null && param.type != null && typeof(param.type) != undefined){
					if(url.indexOf("?") != -1){
						url += "&page=" + param.type;
						param.longUrl += "&page=" + param.type;
					}else{
						url += "?page=" + param.type;
						param.longUrl += "?page=" + param.type;
					}
				}

				//outposting 시 url에 메뉴 아이디 추가
				if(param != null && param.menuId != null && typeof(param.menuId) != undefined){
					if(url.indexOf("?") != -1){
						url += "&menuId=" + param.menuId;
					}
					else{
						url += "?menuId=" + param.menuId;
					}
				}

				//outposting 시 url에 contsId 추가
				if(param != null && param.contsId != null && typeof(param.contsId) != undefined){
					if(url.indexOf("?") != -1){
						url += "&contsId=" + param.contsId;
						param.longUrl += "&contsId=" + param.contsId;
					}
					else{
						url += "?contsId=" + param.contsId;
						param.longUrl += "?contsId=" + param.contsId;
					}
				}
				var shortUrl	= "";
				// param의 longUrl 이 result에서 결과를 찾기 위한 key이므로 같이 변경해줘야 한다.
				param.longUrl  = melon.sns.getUrlRemake({url:param.longUrl});

				$.ajax({
					type: "GET",
					url: melon.sns.getUrlRemake({url:url}),
					data: "longUrl=" + encodeURIComponent(param.longUrl),
					dataType: 'json',
					async: false,
					success: function(json) {
						var jsonObj = eval("(" + json.resultStr + ")");
						shortUrl = jsonObj.results[param.longUrl].shortUrl;
					}
				});

				return shortUrl;
			},

			getShareUrl: function (param) {
				let pocId = POC_ID;
				let title = param.title;
				let desc = param.desc;
				let imgUrl = param.imgUrl;
				let landingUrl = param.landingUrl;
				let shareUrl = '';

				$.ajax({
					type: "GET",
					url : "/sns/snsposting_shareUrl.json",
					data: {
						pocId : pocId,
						title : title,
						desc : desc,
						imgUrl : imgUrl,
						landingUrl : landingUrl
					},
					dataType: 'json',
					async: false,
					success: function(json) {
						if (json.response != null && json.response != undefined) {
							shareUrl = json.response.SHAREURL;
						}
					}
				});

				return shareUrl;
			},

			getShortenUrl2: function (param) {
				var url			= "/sns/snsposting_informShortenUrl.json";

				if(param != null && param.ref != null && param.ref != undefined){
					url += "?ref=" + param.ref;
				}
				//outposting 시  url에 type 추가
				if(param != null && param.type != null && typeof(param.type) != undefined){
					if(url.indexOf("?") != -1){
						url += "&page=" + param.type;
					}else{
						url += "?page=" + param.type;
					}
				}

				//outposting 시 url에 메뉴 아이디 추가
				if(param != null && param.menuId != null && typeof(param.menuId) != undefined){
					if(url.indexOf("?") != -1){
						url += "&menuId=" + param.menuId;
					}
					else{
						url += "?menuId=" + param.menuId;
					}
				}

				//outposting 시 url에 contsId 추가
				if(param != null && param.contsId != null && typeof(param.contsId) != undefined){
					if(url.indexOf("?") != -1){
						url += "&contsId=" + param.contsId;
					}
					else{
						url += "?contsId=" + param.contsId;
					}
				}
				var shortUrl	= "";

				$.ajax({
					type: "GET",
					url: melon.sns.getUrlRemake({url:url}),
					data: "longUrl=" + encodeURIComponent(param.longUrl),
					dataType: 'json',
					async: false,
					success: function(json) {
						var jsonObj = eval("(" + json.resultStr + ")");
						shortUrl = jsonObj.results[param.longUrl].shortUrl;
					}
				});

				return shortUrl;
			},
			getUrlRemake : function (param) {
				var da = new Date();
				var millisecond = da.getMilliseconds();
				var url = param.url;

				if(url.indexOf("?") >= 0 ){
					url = url + "&ajax_ts="+millisecond;
				}else{
					url = url + "?ajax_ts="+millisecond;
				}

				return url;
			},
			formatDate : function(date, gubun){
				var returnDate = '';
				if(date == null || date == '' || date.length < 8){
					return returnDate;
				}
				else{
					if(date == '00000000'){
						returnDate = '';
					}
					else{
						var year = date.substring(0,4);
						var month = date.substring(4,6);
						var day = date.substring(6,8);

						if(year != '0000' && year != '') returnDate = year;
						if(month != '00' && month != '') returnDate += gubun + month;
						if(day != '0000' && day != '') returnDate += gubun + day;
					}
					return returnDate;
				}
			},
			outPostingLog : function(ref, page, sId){
				if(page != undefined && page == 'playlist'){
					page = "ply";
				}

				if(page != undefined && page == 'oalbum'){
					page = "djc";
				}
				var memberKey = getMemberKey();
				$.ajax({
					type : "POST",
					url : "/sns/snsposting_outPostingLog.json",
					data : {ref : ref, page : page, sId : sId, uKey : memberKey},
					success : function(result){

					}
				});
			},
			getImgUrlByWidth : function(imgUrl, width){
				var defaultImg = "https://cdnimg.melon.co.kr/resource/image/web/default/noAlbum_500_160727.jpg";

				if(imgUrl == null || imgUrl == undefined) return defaultImg;

				var dotIdx = imgUrl.lastIndexOf('.');

				if(dotIdx < 0) return '';

				if(imgUrl.indexOf("_") > -1){
					var dimsInx = imgUrl.indexOf("/melon");
					if(dimsInx > -1){
						var preFix = imgUrl.substring(0, dimsInx);
						return preFix;
					}else{
						return imgUrl;
					}
				}else{
					if(width == ""){
						return imgUrl;
					}else{
						var preFix = imgUrl.substring(0, dotIdx);
						var postFix = imgUrl.substring(dotIdx, imgUrl.length);

						return preFix + '_' + width + postFix;
					}
				}

			}
		},

		show : {
			moreButton : function(id, height, buttonTarget){
				var realHeight = $("#" + id).height();

				$("#" + id).css("height", height + "px");

				if(height < realHeight){
					if(buttonTarget != null && buttonTarget != ''){
						$("#" + buttonTarget).show();
					} else {
						$(".arrow_d").show();
					}
				}
			}
		}
	},
	//댓글 플러그인에서 호출할 function들을 포함한 object
	commentObj	= {

		// 아티스트 상세로 이동.
		goArtistDtl: function (artistId)
		{
			MELON.WEBSVC.POC.link.goArtistDetail(artistId, 0);
		},

		// 영상 상세 페이지 이동
		goVideoDtl: function (menuId, mvId)
		{
			MELON.WEBSVC.POC.link.goMvDetail(menuId,mvId,'');
		},

		// 앨범 상세 페이지 이동
		goAlbumDtl: function (albumId)
		{
			MELON.WEBSVC.POC.link.goAlbumDetail(albumId);
		},

		// 곡 상세 페이지 이동
		goSongDtl: function (songId)
		{
			MELON.WEBSVC.POC.link.goSongDetail(songId);
		},

		// 곡 재생
		playSong: function (menuId, contentId, isAdultContent)
		{
			MELON.WEBSVC.POC.play.playSong(menuId,contentId);
		},

		// 앨범 재생
		playAlbum: function (menuId, albumId)
		{
			MELON.WEBSVC.POC.play.playAlbum(menuId,albumId);
		},

		// 로그인 페이지로 이동
		goLogIn: function ()
		{
			MELON.WEBSVC.POC.login.loginPopupLayerd();
		},

		//다운로드
		goBuyProduct : function(formName,contsId,contsType,paramsName,buyType,menuId,exceptAll){
			MELON.WEBSVC.POC.buy.goBuyProduct(formName,contsId,contsType,paramsName,buyType,menuId,exceptAll);
		}
	}













	/*****************************************************************************
	 * 멜론플레이어관련 정보 변수처리
	 * 작성자 : 김재만
	 * 작성일 : 2011.03.24
	 *
	 *****************************************************************************/
	/*
	 * 2011년 04월 19일
		파일명	: MelonOCX.cab
		버젼	: 1,0,0,1
		ID	: MELONOCX.MelonOCXCtrl.1
		생성날짜: 2011년 4월 19일 오늘, 오후 3:29:08
	 *
	 * */
	//var melonPlayerPakage__ = "MELONOCX.MelonOCXCtrl.1";
	var melonPlayerPakage__ = "MelonWebLinker.MelonLinker.1";
	var melonPlayerVersion__ = "5,21,810,10";
	var melonPlayerFunc = {
		// 멜론플레이어 태그를 반환한다.
		getMelonPlayerObject : function (){
			var melonPlayerObject = "";
			var tmpAgent = navigator.userAgent.toUpperCase(); // 브라우저 확인

			if(tmpAgent.indexOf("MSIE") > -1 || tmpAgent.indexOf("TRIDENT") > -1){ //Trident IE11체크
				melonPlayerObject += '<OBJECT ID="MelonWebLinker" WIDTH="0" HEIGHT="0" ';
				melonPlayerObject += 'codebase="//www.melon.com/resource/cab/webplayer/MelonWebLinker.cab#version='+melonPlayerVersion__+'" ';
				melonPlayerObject += 'classid="clsid:C6710B89-FB87-4CE8-A719-565767E70D27">';
				melonPlayerObject += '</OBJECT>';
			}else if(tmpAgent.indexOf("SAFARI") > -1){
				melonPlayerObject += '<object id="MelonWebLinker" type="application/x-melonweblinker" width="0" height="0" ></object>';
			}else if(tmpAgent.indexOf("APPLEWEBKIT/5") > -1){
				melonPlayerObject += '<object id="MelonWebLinker" type="application/x-melonweblinker" width="0" height="0" ></object>';
			}else if(tmpAgent.indexOf("MAC") > -1){
				melonPlayerObject += '<object id="MelonWebLinker" type="application/x-melonweblinker" width="0" height="0" ></object>';
			}else if(tmpAgent.indexOf("FIREFOX") > -1){
				//melonPlayerObject = '<embed id="MelonWebLinker" type="application/npMelonPlugin" foo="100" width="600" height="40">';
				//melonPlayerObject = '<embed id="MelonWebLinker" type="application/x-melonweblinker" foo="100" width="600" height="40">';
				melonPlayerObject = '<object id="MelonWebLinker" type="application/x-melonweblinker" width="0" height="0">';
				//melonPlayerObject += 	'<param name="onload" value="pluginLoaded" />';
				melonPlayerObject += '</object>';
			}else if(tmpAgent.indexOf("CHROME") > -1){
					melonPlayerObject += '<object id="MelonWebLinker" type="application/x-melonweblinker" width="0" height="0" ></object>';
			}else{
				melonPlayerObject += '<object id="MelonWebLinker" type="application/x-melonweblinker" width="0" height="0" ></object>';
			}
			return melonPlayerObject;
		},

		//멜론플레이어 설치여부 확인
		chkMelonPlayerObject : function (){
			try{
				var packager = new ActiveXObject(melonPlayerPakage__);

				if(packager){
					return true;
				}else{
					return false;
				}
			}catch(err){
				return false;
			}
		},


		// 브라우저 확인
		browser : function(){
			var tmpAgent = navigator.userAgent.toUpperCase(); // 브라우저 확인
			var tmpBrowser = "ie"; // 브라우저명
			if(tmpAgent.indexOf("MSIE") > -1 || tmpAgent.indexOf("TRIDENT") > -1){ //Trident IE11 체크
				tmpBrowser = "ie";
			}else if(tmpAgent.indexOf("OPR") > -1 || tmpAgent.indexOf("OPERA") > -1){
				tmpBrowser = "opera";
			}else if(tmpAgent.indexOf("CHROME") > -1){
				tmpBrowser = "chrome";
			}else if(tmpAgent.indexOf("SAFARI") > -1){
				tmpBrowser = "safari";
			}else if(tmpAgent.indexOf("MAC") > -1){
				tmpBrowser = "chrome";
			}else if(tmpAgent.indexOf("FIREFOX") > -1){
				tmpBrowser = "firefox";
			}else if(tmpAgent.indexOf("APPLEWEBKIT/5") > -1){
				tmpBrowser = "safari";
			}else if(tmpAgent.indexOf("EDGE") > -1){
				tmpBrowser = "edge";
			}else{
				tmpBrowser = "none";
			}
			//to-do IE 11확인하여 UA추가

			return tmpBrowser;
		}

	};


	/*****************************************************************************
	 * Modify
	 * 2011.03.14 as-is script는 melon_player_ocx_back.js로 backup
	 * 			  웹플레이어 관련 스크립트만으로 구성 					: YunHyeJeong
	 ******************************************************************************/
	var PARAM_DELIMITER = "";
	var PARAM_DELIMITER_END = ":";
	var itemFlagArray = new Array();
	var itemIdArray = new Array();
	var contentFlagArray = new Array();
	var playItem = "";
	var downloadItem = "";
	var PLAYER_RETURN = "";
	var PLAYER_RETURN_SUCCESS = "RETURN_TOBROWSER_NEED_NOTHING";
	var LOGIN_KEY_CHECK = "";
	var LOGIN_ID_CHECK = "";

	var MELON_PLAYER_OCX_HTTP_HOME = "https://www.melon.com";
	if (typeof httpWww != 'undefined' && httpWww != null && httpWww != ''){
		MELON_PLAYER_OCX_HTTP_HOME = httpWww;
	}
	var IMAGE_HOME = "https://cdnimg.melon.co.kr";
	/**
	 ******************************************************************************/

	var player = {

			/**
			 * 플레이한다.
			 * 한곡 & 여러곡 모두 곡ID를 배열에 넣어 같은 function으로 재생
			 * @param isBought 구매 목록 페이지인 경우 true, 그 외 페이지는 false
			 * @param menuId 메뉴ID(관리자 페이지에서는 "ADMIN")
			 * @param itemFlags 곡아이디/앨범/어학 구분
			 * @param itemIds 곡ID 배열
			 * @param targetMemberKey 멤버키
			 *        타인의 플레이 리스트 재생시 타인의 멤버키
			 */
			ocxPlay : function(menuId, itemFlags, itemIds, targetMemberKey){

				if(typeof targetMemberKey == "undefined"){
					targetMemberKey = getMemberKey()==""? 0 : getMemberKey();
				}

				var RETURN_NOT_LOGIN = "0";
				var RETURN_LOGIN = "1";
				//var IS_LOGIN = false;
				var SHOWCASE_ID = "121";

				var itemFlag = "";
				var itemId = "";
				var playList = "";

				if (itemFlags.length > 1) {
					for (var i=0; i < itemFlags.length; i++) {
						itemFlag = itemFlag + itemFlags[i];
						if (i < (itemFlags.length - 1)) {
							itemFlag = itemFlag + PARAM_DELIMITER;
						}
					}
				} else {
					itemFlag = itemFlags[0];
				}
				// 로그인 체크
				/*if (check_login() == RETURN_LOGIN) {
					IS_LOGIN = true;
				}*/
				// 플레이리스트 생성
				if (itemIds.length > 0) {
					for (var i=0; i < itemIds.length; i++) {
						itemId = itemId + itemIds[i];
						itemId = itemId + PARAM_DELIMITER;
						//playList += itemFlags[i] + PARAM_DELIMITER + itemIds[i] + PARAM_DELIMITER + menuId + PARAM_DELIMITER + "" + PARAM_DELIMITER;
						playList += itemFlags[i] + PARAM_DELIMITER + itemIds[i] + PARAM_DELIMITER + targetMemberKey + PARAM_DELIMITER + menuId + PARAM_DELIMITER + PARAM_DELIMITER_END;
					}
				}
				player.melonplayerPlay(menuId, itemFlags, itemIds, playList);
			},

			/**
			 * 설치하기 확인 및 플레이어 호출
			 * 작성자 : 김재만
			 * 작성일 : 2011.04.07
			 * 내용 : 설치확인 및 플레이어 호출시 파라미터 전달함
			 * 2013.02.18, kjt, 여가부망법-본인확인방법 변경 및 19금 정책에 따른 파라미터 추가.
			 *  value : 웹성인인증[1|0], 본인확인[Y|N], 성인여부[1|0], 비밀번호설정옵션[0|1|2]
			 *                  [Y|N],                     [Y|N]           [설정X|수동|자동]
			 * */
			melonplayerActualPlay : function(params){

				var memberInfo = getMemberInfo();
				var realNameYn = 'N';
				var isMemberAdult = '0';
				var memberAge = 0;

				if(memberInfo != null){
					memberAge = memberInfo.MEMBERAGE;
					realNameYn = memberInfo.REALNAMEYN;
				}

				if (memberAge < 19) {
					isMemberAdult = "0";
				} else if (memberAge >= 19 && realNameYn == "Y") {
					isMemberAdult = "1";
				} else if (memberAge >= 19 && realNameYn == "N") {
					isMemberAdult = "2";
				}
				/*
				 * /a 11111 (웹성인인증 여부, 본인확인 여부, 성인 여부 , 비밀번호설정 옵션)
				 */
				var IS_INPUT_AUTHENTICATION_ADULT_PWD = getCookie("IS_INPUT_AUTHENTICATION_ADULT_PWD");
				var memberAuthFlg = isMemberAdult;

				// 세션에 한한 인증 여부
				var p_sessionAuthYN = IS_INPUT_AUTHENTICATION_ADULT_PWD == "Y" ? "1" : "0";
				// 실명인증여부 Y:실명인증회원, N:비실명회원
				var p_realNameYN	= realNameYn;
				// 성인여부 0:미성년자, 1:성인 실명인증, 2:성인 실명미인증
				var p_adultYN		= isMemberAdult == "0" ? "0" : "1";
				// 인증(본인/성인) 플래그 조회 0:본인확인X, 1:본인확인O, 2:성인비번설정 수동, 3:성인비번설정 자동, 4:본인인증O/미성년자, 5:수동설정(세션에 한한인증), 6:본인인증X/미성년자.
				// 0:미설정, 1:수동, 2:자동:
				//var memberAuthFlg = getMemberAuthFlg();
				//var p_adultOptAutoYN= memberAuthFlg == "3" ? "2" : memberAuthFlg == "2" ? "1" : memberAuthFlg == "5" ? "1" : "0";
				//MELON-5356 [WEB] 웹에서 PCP 구동 시 성인인증 비밀번호 체크 로직 제거
				var p_adultOptAutoYN= "2";

				params += " /a "+p_sessionAuthYN+p_realNameYN+p_adultYN+p_adultOptAutoYN;

				// 플레이어 객체
				$("body").append(melonPlayerFunc.getMelonPlayerObject());
				var MELON_PLAYER = document.getElementById("MelonWebLinker");

				// 브라우저별 분기.
				if(params.indexOf("ie") > -1){		// IE  Browser..
					if(!melonPlayerFunc.chkMelonPlayerObject()){
						if(getCookie("melon_player_setup_status") != "1"){
							alert(" 멜론플레이어가 정상적으로 설치되지 않았습니다.\n 멜론플레이어 설치가 필요합니다.");
							setCookie("melon_player_setup_status", "1", 10, "/", "");
							return;
						}
						setTimeout("melonplayerActualPlay('"+params+"')", 1000); // 멜론플레이어 설치시간

					// 멜론플레이어 정상호출시
					}else{
						if (MELON_PLAYER && MELON_PLAYER != null) {
							//os가 비스타 이상인가?
							/*if (MELON_PLAYER.IsNeedElevation){
								MELON_PLAYER = MELON_PLAYER.GetElevationObject(); //권한 상승 처리
							}*/
							try {
							MELON_PLAYER.MelOnInvoke(params);


							} catch(e) {}
							setCookie("melon_player_setup_status", "0", -1, "/", "");
							return;
						}

					}
				}else{								// Etc Browser..

					if(params.indexOf("chrome") > -1){
						var isPlugInSetup = false;
						var plugInNameStr = "";
						for(var idx=0; idx < navigator.plugins.length; idx++){
							plugInNameStr += navigator.plugins[idx].name+", ";
							if( navigator.plugins[idx].name.indexOf("MelOnWebLinker") > -1 )
								isPlugInSetup = true;
						}
						//alert("브라우저에 설치된 플러그인 목록 : >>"+plugInNameStr+"<<");
						if(isPlugInSetup){
							MELON_PLAYER.MelOnInvoke(params);
						}else{
							window.open("https://www.melon.com/plugin/popup/plugin_install.htm", "_blank", "width=560, height=330, location=no,menubar=no,toolbar=no,scrollbars=yes,resizable=no,status=no" );
							//alert("플러그인 설치 페이지 안내.");
						}
					}else{
						var isPlugInSetup = false;
						for(var idx=0; idx < navigator.plugins.length; idx++){
							if( navigator.plugins[idx].name.indexOf("MelOnWebLinker") > -1 )
								isPlugInSetup = true;
						}

						if(isPlugInSetup){
							MELON_PLAYER.MelOnInvoke(params);
						}else{
							window.open("https://www.melon.com/plugin/popup/plugin_install.htm", "_blank", "width=560, height=330, location=no,menubar=no,toolbar=no,scrollbars=yes,resizable=no,status=no" );
							//alert("플러그인 설치 페이지 안내.");
						}
					}
				}
			},

			/**
			 * KJT-NPAPI 대체 함수.
			 * 작성자 : 김진태
			 * 작성일 : 2015.07.09
			 * 내용 :	 NPAPI 대체를 위해 SOCKETIO를 이용한 플레이어 호출.
			 * 		1.1. 소켓모듈 설치 확인.
			 * 			ActiveX/Plugin과는 다르게 MelOnNtfy (소켓모듈) 의 설치 여부는 확인 할 방법이 딱히 없음.
			 * 			소켓 연결 실패 시 (evt:connect_error) 직접 MelOnNtfy 프로그램 실행하고 다시 소켓연결 시도. (총3번)
			 * 			최종 3회 연결 실패 시 소켓모듈 (MelOnNtfy) 설치 유도.
			 * 			소켓 연결 성공 시 소켓모듈의 버전 확인.
			 * 			 ㄴ 1. 업데이트 버전이 있을 시 모듈에서 자동업데이트 후 소켓모듈 종료 - 이때 (evt:result)에 STATUS 를 확인해서 재기동.
			 * 			 ㄴ 2. 업데이트 버전이 없을 시 그냥 do nothing.
			 * 		1.2. 플레이어 호출.
			 * 		1.3. 홈탭의 경우엔 MelOnAPI 로 대체.
			 */
			melonplayerActualPlaySocket : function(menuId, itemFlags, itemList){
				var realNameYn = 'N';
				var isMemberAdult = '0';
				var memberAge = 0;
				var memberInfo = getMemberInfo();

				if(memberInfo != null){
					memberAge = memberInfo.MEMBERAGE;
					realNameYn = memberInfo.REALNAMEYN;
				}

				if (memberAge < 19) {
					isMemberAdult = "0";
				} else if (memberAge >= 19 && realNameYn == "Y") {
					isMemberAdult = "1";
				} else if (memberAge >= 19 && realNameYn == "N") {
					isMemberAdult = "2";
				}

				var IS_INPUT_AUTHENTICATION_ADULT_PWD = getCookie("IS_INPUT_AUTHENTICATION_ADULT_PWD");
				var memberAuthFlg = isMemberAdult;

				// 세션에 한한 인증 여부
				var p_sessionAuthYN = IS_INPUT_AUTHENTICATION_ADULT_PWD == "Y" ? "1" : "0";
				// 실명인증여부 Y:실명인증회원, N:비실명회원
				var p_realNameYN	= realNameYn;
				// 성인여부 0:미성년자, 1:성인 실명인증, 2:성인 실명미인증
				var p_adultYN		= isMemberAdult == "0" ? "0" : "1";
				// 인증(본인/성인) 플래그 조회 0:본인확인X, 1:본인확인O, 2:성인비번설정 수동, 3:성인비번설정 자동, 4:본인인증O/미성년자, 5:수동설정(세션에 한한인증), 6:본인인증X/미성년자.
				// 0:미설정, 1:수동, 2:자동:
				//var tmpMemberAuthFlg = getMemberAuthFlg();
				//var p_adultOptAutoYN= tmpMemberAuthFlg == "3" ? "2" : tmpMemberAuthFlg == "2" ? "1" : tmpMemberAuthFlg == "5" ? "1" : "0";
				//MELON-5356 [WEB] 웹에서 PCP 구동 시 성인인증 비밀번호 체크 로직 제거
				var p_adultOptAutoYN= "2";

				var p_command		= itemFlags == 'smart' ? 'smartradio':'play';

				// 홈탭분기.
				var fromMPS = getCookie("MPS"); // 멜론 플레이어에서 왔는지 확인.
				var fromMPSYn = fromMPS == null || fromMPS.indexOf("MELONPLAYER") < 0;

				//hifi 메뉴 체크 메뉴아이디89로시작
				var isHiFiMenu = false;
				try{
					if(typeof menuId != 'undefined'){
						//20170712 아티스트채널>HiFi탭메뉴아이디 추가(27220201,27220101)
						if(menuId.length > 2){
							if('89' == menuId.substr(0,2)
									|| '27220201' == menuId
									|| '27220101' == menuId
									){
								isHiFiMenu = 1;
							}
						}
					}
				}catch(e){}

				if(fromMPSYn){
					// 공통 파라미터.
					if(isMelonLogin()){
						var rParam = {
							USERID				:getMemberId() + ',' + getMemberToken(),
							USERNO				:getMemberKey(),
							TOKEN               :getMemberToken() ,
							COMMAND				:p_command,
							BROWSER				:navigator.userAgent,
							SESSIONAUTH			:p_sessionAuthYN,
							REALNAMETYPE		:p_realNameYN,
							ADULTTYPE			:p_adultYN,
							PASSWORDAUTOOPTION	:p_adultOptAutoYN,
							LOGINTIME			:'',
							ISHIFIMENU			:isHiFiMenu,
							LIST				:itemList
						};
					}else{
						var rParam = {
							COMMAND				:p_command,
							BROWSER				:navigator.userAgent,
							SESSIONAUTH			:p_sessionAuthYN,
							REALNAMETYPE		:p_realNameYN,
							ADULTTYPE			:p_adultYN,
							PASSWORDAUTOOPTION	:p_adultOptAutoYN,
							LOGINTIME			:'',
							ISHIFIMENU			:isHiFiMenu,
							LIST				:itemList
						};
					}

//					try{console.log("socketio.playFunction::rParam::["+JSON.stringify(rParam)+"]" );}catch(e){}
//					try{console.log("socketio.playFunction::start");}catch(e){}
					$.fn.chkNotifyInstalled();
					var localCnt=0;
					var retry = setInterval(function () {
		                if($.isNotifyInstalled) {
		                	$.fn.socketPlay(JSON.stringify(rParam));
		                }

		                localCnt++;
		                if(localCnt==5 || $.isNotifyInstalled) {
		                    clearInterval(retry);
		                    if(!$.isNotifyInstalled) {
		                        //alert('open install popup');
		                    }
		                }

		            },1500);

//					try{console.log("socketio.playFunction::end");}catch(e){}
				}else{		// 홈탭.
					if(itemList.length > 1){
						/* 다중 곡 듣기로직 별도 분기.*/
						var itemsInfo = new MelOnAPIWebHelper();
						for(var idx=0; idx < itemList.length; idx++){
							itemsInfo.append(itemList[idx].itemIDType, itemList[idx].itemID, itemList[idx].statisticID, isHiFiMenu);
						}
						var itemInfo = unescape(JSON.stringify(itemsInfo).replace(/\\u/g, '%u'));
						//alert("itemInfo1::"+itemInfo);
						if(itemFlags == 'smart'){
							MelonAPI.action("smartRadioDetailTabOpen", itemInfo);
						}else{
							MelonAPI.action("listenMusic", itemInfo);
						}
					}else{

						if(itemFlags == 'smart'){
							for(var idx=0; idx < itemList.length; idx++){
								MelonAPI.action("smartRadioDetailTabOpen", unescape(JSON.stringify(itemList[idx]).replace(/\\u/g, '%u')));
							}
						}else{
							var itemsInfo = new MelOnAPIWebHelper();
							for(var idx=0; idx < itemList.length; idx++){
								itemsInfo.append(itemList[idx].itemIDType, itemList[idx].itemID, itemList[idx].statisticID, isHiFiMenu, itemList[idx].userNo);
								var itemInfo = unescape(JSON.stringify(itemsInfo).replace(/\\u/g, '%u'));
								//alert("itemInfo2::"+itemInfo);
								MelonAPI.action("listenMusic", itemInfo);
							}
						}
					}


				}
			},

		melonplayerActualPlayHighVdo : function(params){
			var realNameYn = 'N';
			var isMemberAdult = '0';
			var memberAge = 0;
			var memberInfo = getMemberInfo();

			if(memberInfo != null){
				memberAge = memberInfo.MEMBERAGE;
				realNameYn = memberInfo.REALNAMEYN;
			}

			if (memberAge < 19) {
				isMemberAdult = "0";
			} else if (memberAge >= 19 && realNameYn == "Y") {
				isMemberAdult = "1";
			} else if (memberAge >= 19 && realNameYn == "N") {
				isMemberAdult = "2";
			}

			var IS_INPUT_AUTHENTICATION_ADULT_PWD = getCookie("IS_INPUT_AUTHENTICATION_ADULT_PWD");
			var memberAuthFlg = isMemberAdult;

			// 세션에 한한 인증 여부
			var p_sessionAuthYN = IS_INPUT_AUTHENTICATION_ADULT_PWD == "Y" ? "1" : "0";
			// 실명인증여부 Y:실명인증회원, N:비실명회원
			var p_realNameYN	= realNameYn;
			// 성인여부 0:미성년자, 1:성인 실명인증, 2:성인 실명미인증
			var p_adultYN		= isMemberAdult == "0" ? "0" : "1";
			// 인증(본인/성인) 플래그 조회 0:본인확인X, 1:본인확인O, 2:성인비번설정 수동, 3:성인비번설정 자동, 4:본인인증O/미성년자, 5:수동설정(세션에 한한인증), 6:본인인증X/미성년자.
			// 0:미설정, 1:수동, 2:자동:
			var p_adultOptAutoYN= "1";

			params += " /a "+p_sessionAuthYN+p_realNameYN+p_adultYN+p_adultOptAutoYN;

			// 플레이어 객체
			$("body").append(melonPlayerFunc.getMelonPlayerObject());
			var MELON_PLAYER = document.getElementById("MelonWebLinker");

			// 브라우저별 분기.
			if(params.indexOf("ie") > -1){		// IE  Browser..
				if(!melonPlayerFunc.chkMelonPlayerObject()){
					if(getCookie("melon_player_setup_status") != "1"){
						alert(" 멜론플레이어가 정상적으로 설치되지 않았습니다.\n 멜론플레이어 설치가 필요합니다.");
						setCookie("melon_player_setup_status", "1", 10, "/", "");
						return;
					}
					setTimeout("melonplayerActualPlay('"+params+"')", 1000); // 멜론플레이어 설치시간

				// 멜론플레이어 정상호출시
				}else{
					if (MELON_PLAYER && MELON_PLAYER != null) {
						try {
						MELON_PLAYER.MelOnInvoke(params);
						} catch(e) {}
						setCookie("melon_player_setup_status", "0", -1, "/", "");
						return;
					}

				}
			}else{								// Etc Browser..

				if(params.indexOf("chrome") > -1){
					var isPlugInSetup = false;
					var plugInNameStr = "";
					for(var idx=0; idx < navigator.plugins.length; idx++){
						plugInNameStr += navigator.plugins[idx].name+", ";
						if( navigator.plugins[idx].name.indexOf("MelOnWebLinker") > -1 )
							isPlugInSetup = true;
					}
					//alert("브라우저에 설치된 플러그인 목록 : >>"+plugInNameStr+"<<");
					if(isPlugInSetup){
						MELON_PLAYER.MelOnInvoke(params);
					}else{
						window.open("https://www.melon.com/plugin/popup/plugin_install.htm", "_blank", "width=560, height=330, location=no,menubar=no,toolbar=no,scrollbars=yes,resizable=no,status=no" );
						//alert("플러그인 설치 페이지 안내.");
					}
				}else{
					var isPlugInSetup = false;
					for(var idx=0; idx < navigator.plugins.length; idx++){
						if( navigator.plugins[idx].name.indexOf("MelOnWebLinker") > -1 )
							isPlugInSetup = true;
					}

					if(isPlugInSetup){
						MELON_PLAYER.MelOnInvoke(params);
					}else{
						window.open("https://www.melon.com/plugin/popup/plugin_install.htm", "_blank", "width=560, height=330, location=no,menubar=no,toolbar=no,scrollbars=yes,resizable=no,status=no" );
						//alert("플러그인 설치 페이지 안내.");
					}
				}
			}
		},

		melon_ocx_message : function(PLAYER_RETURN){
			if (PLAYER_RETURN == 0) {
				return PLAYER_RETURN_SUCCESS;
			} else if (PLAYER_RETURN == 1) {
				if(confirm("음악을 듣기 위해서는 멜론 플레이어가 설치되어 있어야 합니다..\n멜론 플레이어를 설치하시겠습니까?")) {
				    document.location.href="https://appsvr.melon.com/cabv40/Melon4Setup.exe";
				}
				return "RETURN_TOBROWSER_NEED_INSTALL";
			} else if (PLAYER_RETURN == -1) {
				alert("쿠키 정보가 없습니다 : ERROR_CODE=[RETURN_TOBROWSER_FAILURE_COOKIE]");
				return "RETURN_TOBROWSER_FAILURE_COOKIE";
			} else if (PLAYER_RETURN == -2) {
				alert("오류가 발생했습니다. 잠시 후에 다시 이용해 주십시오.");
				return "RETURN_TOBROWSER_FAILURE_HTTPCALL";
			} else if (PLAYER_RETURN == -3) {
				alert("오류가 발생했습니다. 잠시 후에 다시 이용해 주십시오.");
				return "RETURN_TOBROWSER_FAILURE_HTTPCALL_STATUS";
			} else if (PLAYER_RETURN == -4) {
				return PLAYER_RETURN_SUCCESS;
			} else if (PLAYER_RETURN == -5) {
				alert("사용자 정보가 불충합니다. 잠시 후에 다시 이용해 주십시오.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -6) {
				alert("서버와의 통신상에 Error가 발생했습니다. \n잠시 후에 다시 이용해 주십시오.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10001) {
				alert("오류가 발생했습니다. 잠시 후에 다시 이용해 주십시오.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10204) {
				alert("권리사의 요청으로 서비스가 일시 중지된 곡입니다.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10201) {
				alert("음악 정보가 존재하지 않습니다.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10202) {
				alert("앨범 정보가 존재하지 않습니다.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10203) {
				alert("상품 정보가 존재하지 않습니다.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10300) {
				alert("구매하지 않은 음악입니다.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10301) {
				alert("선물 받지 않은 음악입니다.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10302) {
				alert("다운로드 기간이 지났습니다.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10406) {
			    // SM 에러
				alert("오류가 발생했습니다. 잠시 후에 다시 이용해 주십시오.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10409) {
			    // 받은 선물 등록 오류
				alert("오류가 발생했습니다. 잠시 후에 다시 이용해 주십시오.");
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN == -10207) {
				location.href = "/cds/common/web/popnotice_list.htm?ptype=NL";
				return "RETURN_TOBROWSER_FAILURE";
			} else if (PLAYER_RETURN < 0) {
				alert("오류가 발생했습니다. 잠시 후에 다시 이용해 주십시오.");
				return "RETURN_TOBROWSER_FAILURE";
			}

			else
			{
				return "";
			}
		},

		/**
		 * 멜론플레이어 공통부분 분리시킴.
		 * 작성자 : 김재만
		 * 작성일 : 2011.03.25
		 *  flag => 0(스마트라디오?), 1(곡), 2(앨범), 3(?), 4(어학)
		 *  1=Song, 2=Album, 3=Product, 4=Study, 5=Lecture, 6=공개앨범, 7=오디오북, 21=뮤직비디오(Download or Play)
		 * */
		melonplayerPlay : function(menuId, itemFlags, itemIds, playList){
			var params = "/c ";





			// 로그인한 사용자 - 애플리케이션 듣기
			var tmpItemIds = "";
			var arrItemIds = String(itemIds).split(",");
			var itemIdsLen = 1;

			var cmpBrowser = melonPlayerFunc.browser();
			var fromMPS = getCookie("MPS"); // 멜론 플레이어에서 왔는지 확인.
			var fromMPSYn = fromMPS == null || fromMPS.indexOf("MELONPLAYER") < 0;
			var tmpObj = new Object();

			var itemList = [];
			if(menuId == ""){
				menuId = "58611";	// 메뉴아이디가 없는 경우 MelOnAPI 호출이 안되므로.
			}
			// 스마트라디오인경우
			if(itemFlags == 'smart'){

				// playList 파싱.
				var parsedPlaylist = playList.replace(//gi, "^");

				var poArr = parsedPlaylist.split("^");

				if(fromMPSYn){	// browser case.
					if(cmpBrowser == "chrome" || cmpBrowser == "edge" || cmpBrowser == "safari" || cmpBrowser == "firefox" ){
						tmpObj = {
								CHID		:poArr[0],	// channelId
								CHINFO		:poArr[1],	// channal:8 | artist:9 | genre:10
								CHYEAR		:poArr[2],	// 장르인 경우에만 유효.
								STATISTICID	:poArr[3]	// 메뉴 아이디.
						};

						itemList.push(tmpObj);
						player.melonplayerActualPlaySocket(menuId, itemFlags, itemList);
					}else {
						playList = playList;
						params += "smartradio /b "+melonPlayerFunc.browser()+" /i " + getMemberId() + "," + getMemberToken()  + " /n "+getMemberKey()+" /s "+playList;
						//alert('chyeodoc :'+params);

						if ( itemFlags == '21') {
							player.melonplayerActualPlayHighVdo(params);
						} else {
							player.melonplayerActualPlay(params);
						}
					}

				}else{			// PCP case.
					tmpObj = {
							chinfo		: poArr[1],
							chid		: poArr[0],
							chname		: "smart",
							genreyear	: "",
							channelgubun: "A",
							statisticID	: poArr[3]
					};

					itemList.push(tmpObj);
					player.melonplayerActualPlaySocket(menuId, itemFlags, itemList);
				}


			// 스마트라디오 외의 경우
			}else if(itemFlags != 'smart'){

				if(fromMPSYn){	// browser case.
					if(cmpBrowser == "chrome" || cmpBrowser == "edge" || cmpBrowser == "safari" || cmpBrowser == "firefox"){
						for(var idx=0; idx < itemIds.length; idx++){

							tmpObj = {
								ITEMFLAG	:itemFlags[idx],
								ITEMID		:itemIds[idx],
								FRIENDNO	:getMemberKey(),
								STATISTICID	:menuId
							};
							itemList.push(tmpObj);
						}

						player.melonplayerActualPlaySocket(menuId, itemFlags, itemList);
					}else {
						if(itemFlags != '4'){
							itemIdsLen = itemIds.length;
						}else{
							itemIdsLen = arrItemIds.length;
						}
						playList = itemIdsLen + PARAM_DELIMITER + playList;

						if(isMelonLogin()){
							params += "play /b "+melonPlayerFunc.browser()+" /i " + getMemberId() + "," + getMemberToken()  + " /n "+getMemberKey()+" /s "+playList;
						}else{
							params += "play /b "+melonPlayerFunc.browser()+" /s "+playList;
						}


						if ( itemFlags == '21') {
							player.melonplayerActualPlayHighVdo(params);
						} else {
							player.melonplayerActualPlay(params);
						}
					}
				}else{			// PCP case.
					for(var idx=0; idx < itemIds.length; idx++){
						tmpObj = {
							userNo		:getMemberKey(),
							itemIDType	:itemFlags[idx],
							itemID		:itemIds[idx],
							statisticID	:menuId
						};

						itemList.push(tmpObj);
					}

					player.melonplayerActualPlaySocket(menuId, itemFlags, itemList);
				}

			}
		},


		newPcpPlay : function(menuId,cType,cIds){
			//연동중 모달
			newPcpNotice.loading.open();



			//플레이어 설치 체크
			var cacheKey = getCookie('PCID');

			var appSchem = 'melonApp://play';
			appSchem += '?cType=' + cType;
			appSchem += '&menuId=' + menuId;
			appSchem += '&cList=' + cIds.join(',');
			appSchem += '&cacheKey=' + cacheKey;

			if(getMemberKey() != "") {
				$.ajax({
					url:  '/player/ott.json',
					dataType: 'json'
				}).done(function(data) {
					var ott = data.OTTCODE;
					//console.log("newPcpPlay ott : " + ott);
					if(ott != ''){
						appSchem += '&ott=' + ott;
					}
					location.href = appSchem;
				});
			}else{
				location.href = appSchem;
			}

			var isCache = false;
			//3초동안 1초마다 맴캐시에 cacheKey(PCID) 존재하는지 요청
			var isCacheInterval = setInterval(function() {
				//console.log('isCacheInterval 실행');

				$.ajax({
					url:  '/player/setup_cache.json?cacheKey='+cacheKey,
					async : false,
					dataType: 'json'
				}).done(function(data) {
					if(data.ISCACHE){
						isCache = true;
						newPcpNotice.loading.hide();
					}
				});

				if(isCache) clearTimeout(isCacheInterval);

			},1000);

			setTimeout(function() {
				//interval 종료
				clearTimeout(isCacheInterval);

				//맴캐시에 uniqKey(PCID) 없을 경우 설치 유도 팝업 띄움
				if(!isCache){
					newPcpNotice.setup.open();
					newPcpNotice.loading.hide();
				}
			},20000);
		},
		isWindowsXp : function(){
			var uaProduct = navigator.userAgent.split(" ")[0];
			var ua = uaProduct.length > 0 ? navigator.userAgent.replace(uaProduct, "") : navigator.userAgent;
			return ua.match("Windows NT (5\\.1|32)") !== null || (ua.indexOf("Windows NT 5.2") >= 0 && ua.indexOf("Win64") >= 0);
		}



	}



















	// notify설치 여부 전역변수.
	$.isNotifyInstalled = false;
	// notify설치 확인 함수.
	$.fn.chkNotifyInstalled = function(){
		try{ console.log("ntfy install checking start."); }catch(e){}
		$.isNotifyInstalled = false;
		var maxRetryCnt = 3;
        var nFailed_Count = 0;
		var reconnectionDelayMax = 1000;
        var DestinationIP = "http://127.0.0.1:46286";

        if( $("#notifyFrame").length < 1 ){
			var notifyFrame = '<iframe id="notifyFrame" name="notifyFrame" width=0 height=0 src="" style="display:none;"></iframe>';
			$(notifyFrame).appendTo("body");
		}

        try{ console.log("ntfy install checking... connect try..."); }catch(e){}
        try {
	        	var connectData = {'reconnection': true,'reconnectionDelay': 1000,'reconnectionDelayMax': 2500,'reconnectionAttempts': maxRetryCnt,'force new connection': true};
	        	if(melonPlayerFunc.browser() == 'ie' && navigator.userAgent.indexOf("Trident") < 0){
	        		connectData = { 'reconnection': true,'timeout':3000 , 'reconnectionDelay': 1000,'reconnectionDelayMax': 2500,'reconnectionAttempts': maxRetryCnt, 'force new connection': true  };
	        	}
            socketio = io.connect(DestinationIP, connectData);
        } catch(e) {
            console.log(e);
        }

        socketio.on('connect', function() {
        	try{ console.log("ntfy install checking... connect success..."); }catch(e){}
            try {
                $.isNotifyInstalled = true;
                nFailed_Count = 0;

                // 연결 성공 시 버전 확인.
                var checkParam = {
						USERID				:getMemberId() + ',' + getMemberToken(),
				        USERNO				:getMemberKey(),
					    TOKEN               :getMemberToken() ,
				        COMMAND				:"compversion",
				        BROWSER				:navigator.userAgent,
				        VERSIONNO			:"51562415"
				};
                socketio.emit('query', JSON.stringify(checkParam));
            } catch (e) {
                //alert(e);
            }
        });

        socketio.on('result',function(result) {
        	try{ console.log("ntfy install checking... empty result..."); }catch(e){}
        	var rsltObj = JSON.parse(result);
        	try{ console.log("ntfy install checking... result.STATUS"+rsltObj.STATUS); }catch(e){}
        	socketio.close();

        	if(rsltObj.STATUS == "-10001"){	// MelOnNotify2 업데이트 시 재 실행.

				$.isNotifyInstalled = false;
				maxRetryCnt = 7;  // 업데이트가 일어나면 백신이 방어관련 질의를 보낼 수 있다. 이에 최대 시도회수를 늘려서 사용자가 응답할 시간을 번다.
				nFailed_Count = 0;

				// ie9버전 분기 처리.
				if(navigator.userAgent.toUpperCase().indexOf("MSIE 9") > -1 && false){
					var ie9Win = window.open("", "", "scrollbars=no,location=no,width=0,height=0,toolbar=no,left=-10,top=-10");
					ie9Win.document.write("<iframe src='MelOnNtfy2:melonhandler' width=0, height=0, style='display:none;'></iframe>");
					setTimeout(function () {
			            try {
			            	ie9Win.location.href;
			            	ie9Win.setTimeout("window.close()", 500);
			            } catch (e) {
			            	ie9Win.close();
			            }
			        }, 1000);
				}else{
					try{
						$("#notifyFrame").attr("src", "MelOnNtfy2:melonhandler");
					}catch(e){

					}
				}
        	}
        });

        socketio.on('connect_error', function() {
        	try{ console.log("ntfy install checking... connect error..."+nFailed_Count); }catch(e){}
        	nFailed_Count++;
            if (nFailed_Count == 1 ){
				try{
					$("#notifyFrame").attr("src", "MelOnNtfy2:melonhandler");
				}catch(e){

				}
            } else if(nFailed_Count >= maxRetryCnt) {

                nFailed_Count= 0;
                try {
                	socketio.close();
                } catch (e) {
                    //alert(e);
                }
                $.isNotifyInstalled = false;
                window.open("https://www.melon.com/plugin/popup/melonnotify_install.htm", "melonnotify_install", "width=560, height=330, location=no,menubar=no,toolbar=no,scrollbars=yes,resizable=no,status=no" );
                //alert("프로그램이 설치 되어 있지 않습니다.\n 추후 MelonNtfy2Setup 설치 페이지로 연결합니다.");
            }

        });

        socketio.on('disconnect', function() {
        	try{ console.log("ntfy install checking... disconnect after connect ..."); }catch(e){}
        });
	};

	$.fn.optShift = function() {
		// shift 선택 기능
		var end = 0, start = 0;
		var $chk = this;
		$chk.click(function(event) {
			start = $chk.index(event.target);
			if(event.shiftKey) {
				if(start > end) {
					var temp = start; start = end; end = temp;
				};
				for(var i = start; i < end; i++) {
					if ( !$chk.eq(i).is(':disabled') ) {
							$chk.eq(i).checked(true);
					}
				};
			};
			end = start;
		});
	};

	$.fn.socketPlay = function(queryVal){

		var maxRetryCnt = 3;
		var nFailed_Count = 0;
        var DestinationIP = "http://127.0.0.1:46286";

		if( $("#notifyFrame").length < 1 ){
			var notifyFrame = '<iframe id="notifyFrame" name="notifyFrame" width=0 height=0 src="" style="display:none;"></iframe>';
			$(notifyFrame).appendTo("body");
		}

		if(typeof socketio == "undefined"){
			try{console.log("socketio.connect::start");}catch(e){}
			try{
				var connectData = {'reconnection': true,'reconnectionDelay': 1000,'reconnectionDelayMax': 1000,'reconnectionAttempts': maxRetryCnt,'force new connection': true};
	        	if(melonPlayerFunc.browser() == 'ie' && navigator.userAgent.indexOf("Trident") < 0){
	        		connectData = { 'reconnection': true,'timeout':3000 , 'reconnectionDelay': 1000,'reconnectionDelayMax': 1000,'reconnectionAttempts': maxRetryCnt, 'force new connection': true  };
	        	}
				socketio = io.connect(DestinationIP, connectData);
			}catch(e){
				//alert(e);
			}
		}else{
			if(socketio.disconnected){
				try{console.log("socketio.live::disconnected:true");}catch(e){}
		        try {
		        	var connectData = {'reconnection': true,'reconnectionDelay': 1000,'reconnectionDelayMax': 1000,'reconnectionAttempts': maxRetryCnt,'force new connection': true};
		        	if(melonPlayerFunc.browser() == 'ie' && navigator.userAgent.indexOf("Trident") < 0){
		        		connectData = { 'reconnection': true,'timeout':3000 , 'reconnectionDelay': 1000,'reconnectionDelayMax': 1000,'reconnectionAttempts': maxRetryCnt, 'force new connection': true  };
		        	}
					socketio = io.connect(DestinationIP, connectData);
		        } catch (e) {
		            //alert(e);
		        }
			}else{
				// do nothing
				try{console.log("socketio.live::disconnected:false do Nothing!!!!");}catch(e){}
			}
		}


		socketio.on("connect_error", function(){
			try{console.log("socketio.connect_error::nFailed_Count::"+nFailed_Count);}catch(e){}
			nFailed_Count++;
			if (nFailed_Count == 1){
				try{
					$("#notifyFrame").attr("src", "MelOnNtfy2:melonhandler");
				}catch(e){
					//alert(e);
				}
	        }
			else if(nFailed_Count >= maxRetryCnt){
				window.open("https://www.melon.com/plugin/popup/melonnotify_install.htm", "melonnotify_install", "width=560, height=330, location=no,menubar=no,toolbar=no,scrollbars=yes,resizable=no,status=no" );
				//alert("프로그램이 설치 되어 있지 않습니다.\n 추후 MelonNtfy2Setup 설치 페이지로 연결합니다!");
				nFailed_Count = 0;
				try{
					socketio.close();
				}catch(e){

					//alert(e);
				}

			}

		});

		socketio.on('connect', function() {
			try{console.log("socketio.connect::success");}catch(e){}
			nFailed_Count = 0;
	        try {
	        	socketio.emit('query', queryVal);
	        } catch (e) {
	            //alert(e);
	        }
	    });

		socketio.on('disconnect', function() {
			try{console.log("socketio.disconnect::");}catch(e){}
	        try {
	        	$("#notifyFrame").attr("src", "");
	        } catch (e) {

	        }
	    });

		socketio.on('result', function (result) {
	    	try{console.log("socketio.result::"+result);}catch(e){}
	    	try{console.log("socketio.result::close");}catch(e){}
	    	socketio.close();
	        try {
	        	$("#notifyFrame").attr("src", "");
	        } catch (e) {

	        }
	    });
	};

})();

////MelOnAPIHelper >>>>>>MelOnAPIWebHelper 변경을 권장함//////////////
////////////////////////////////////////////////////////////////////////////////
function MelOnAPIHelper() {
    // public properties
    this.LIST = Array();

    // private properties
}

////////////////////////////////////////////////////////////////////////////////
// public methods

MelOnAPIHelper.prototype.append = function (itemIDType, itemID, statisticID) {
    var nIndex = this.LIST.length;
    this.LIST[nIndex] = {
        itemIDType: itemIDType,
        itemID: itemID,
        statisticID: statisticID
    };
}

MelOnAPIHelper.prototype.stringify = (function () {
    return JSON.stringify(this);
});
////MelOnAPIHelper >>>>>>MelOnAPIWebHelper 변경을 권장함//////////////


function MelOnAPIWebHelper() {
	// public properties
	this.LIST = Array();
	// private properties
}


MelOnAPIWebHelper.prototype.append = function (itemIDType, itemID, statisticID, isHiFiMenu, userNo) {
	var nIndex = this.LIST.length;
	this.LIST[nIndex] = {
	    itemIDType: itemIDType,
	    itemID: itemID,
	    isHiFiMenu: isHiFiMenu,
	    userNo: userNo,
	    statisticID: statisticID
	};
}

MelOnAPIWebHelper.prototype.stringify = (function () {
	return JSON.stringify(this);
});

var _FLASH_INSTALLED = false;
try{
	var v = 0;
	if ( typeof navigator.plugins != "undefined" && typeof navigator.plugins["Shockwave Flash"] == "object") {
		_FLASH_INSTALLED = true;
	}
	try {
		v = parseFloat((new ActiveXObject("ShockwaveFlash.ShockwaveFlash")).GetVariable("$version").match(/(.\d?),/)[1],10);
		if ( _FLASH_INSTALLED || v > 5 ) {
			_FLASH_INSTALLED = true;
		}
	} catch(e) {
	}
} catch(e) {
	_FLASH_INSTALLED = false;
}

getBrowserName = function () {
    var uaProduct = navigator.userAgent.split(" ")[0];
    var ua = uaProduct.length > 0 ? navigator.userAgent.replace(uaProduct, "") : navigator.userAgent;
	if (uaProduct.indexOf("Opera") >= 0 || ua.indexOf("Opera") >= 0 || uaProduct.indexOf("OPR") >= 0 || ua.indexOf("OPR") >= 0) {return "Opera";}
	if (ua.indexOf("MSIE") >= 0 || ua.indexOf("Edge") >= 0) { return "Internet Explorer"; }
	if (ua.match("(Windows NT 6.3|Windows NT 6.2|Windows NT 6.1|Windows NT 10.0)") !== null && ua.indexOf("Trident") >= 0) {return "Internet Explorer";}
    if (ua.indexOf("Firefox") >= 0) { return "Firefox"; }
    if (ua.indexOf("Chrome") >= 0) { return "Google Chrome" };
    if (ua.indexOf("Safari") >= 0) {return "Safari"; }
    if (ua.indexOf("Gecko") >= 0) {return "Gecko"; }
    if (ua.indexOf("Mozilla") >= 0) {return "Netscape" };
    return "";

}
webPlayerFlashAlert = function() {
	var tmpl = ['<div class="layer_popup small" style="width:384px; display:none;" >',
				'<h1 class="layer_title">설치안내</h1>',
				'<div class="layer_cntt">',
					'<div class="box_default">',
						'<p class="txt_emphs">Adobe Flash Player 설치안내</p>',
						'<p>멜론 웹플레이어를 사용하시려면 <br/> Adobe Flash Player가 설치되어 있어야 합니다.</p>',
						'<p>[확인]버튼을 클릭하면, 설치 사이트로 이동합니다.</p>',
					'</div>',

					'<div class="wrap_btn_c">',
						'<button type="button" title="확인" class="btn_emphs_small" data-role="ok"><span class="odd_span"><span class="even_span">확인</span></span></button>',
						'<button type="button" title="취소" class="btn_emphs02_small d_close" data-role="cancel"><span class="odd_span"><span class="even_span">취소</span></span></button>',
					'</div>',
				'</div>',
				'<button type="button" title="닫기" class="btn_close d_close" data-role="ok"><span class="odd_span">닫기</span></button>',
				'<span class="shadow"></span>',
				'</div>'].join('');

	var el = $(tmpl).appendTo('body').find('div.d_content').html('').end();
	var Modal = MELON.PBPGN.Modal;
	var modal = new Modal(
		el,
		{ onOk: function() { window.open('http://get.adobe.com/kr/flashplayer/','flashurl'); self.close(); }
		});
	return modal.on('modalhidden', function(){
		el.remove();
	});
}


//UX-1272 20180402 맥플레이어 안내 팝업 //


//UX-1272 20180402 맥플레이어 안내 팝업 //
var macinterval;
var macNotice = {
	open : function() {
		var popform = ['<div id="macplayer_popup" class="layer_popup">',
			'<h1 class="title">안내</h1>',
			'<div class="cntt">',
			  '<p class="text_notice">MAC OS에서는 MAC용 멜론 플레이어를 통해 음악을 <br />감상할 수 있습니다. 멜론 플레이어가 설치 되어있지 <br />않은 경우 App Store에서 설치해 주세요.</p>',
			  '<ul class="button_group">',
				'<li><a href="https://itunes.apple.com/us/app/%EB%A9%9C%EB%A1%A0-melon/id1236050766?l=ko&ls=1&mt=12" target="_blank">앱스토어 바로가기</a></li>',
				'<li><a href="//www.melon.com/customer/serviceintro/multi_pc_web.htm" target="_blank">설치 방법 보기</a></li>',
			  '</ul>',
			'</div>',
		   '<button type="button" title="로그인 닫기" class="btn_close d_close"><span>닫기</span></button>',
		   '<span class="shadow"></span>',
		   '</div>'].join('');
		$(popform).appendTo('body').end();
		//clearInterval(this.hide)
		$('#macplayer_popup').modal('show');
		clearInterval(macinterval)	;
		this.hide();
	},
	hide : function() {
		macinterval = setInterval(function() {
			$('#macplayer_popup').modal('hide');
		}, 10000);
	}
};

var newPcpNotice = {
	loading : {
		open : function() {
			$('.newpcp_pop_loading').remove();
			var tmpl = ['',
				'<div id="pcplayer_popup" class="layer_popup layer_popup_type03 newpcp_pop_loading">',
				'  <div class="cntt">',
				'    <img class="loading" src="https://cdnimg.melon.co.kr/resource/image/web/common/img_loading.gif" alt="" width="40">',
				'    <p class="text_notice">멜론 플레이어를 실행 중입니다.</p>',
				'  </div>',
				'  <span class="shadow"></span>',
				'</div>'].join('');
			$(tmpl).appendTo('body').end();
			$('.newpcp_pop_loading').modal('show');
		},
		hide : function(){
			$('.newpcp_pop_loading').modal('hide');
		}
	}
	,setup : {
		open : function() {
			$('.newpcp_pop_setup').remove();
			var tmpl = ['',
				'<div id="pcplayer_popup" class="layer_popup layer_popup_type01 newpcp_pop_setup">',
				'  <div class="cntt">',
				'    <h1 class="title">안내</h1>',
				'    <p class="text_notice">멜론 웹 서비스를 이용하기 위해서는 멜론 플레이어<br>설치가 필요합니다. 프로그램을 다운로드 후 설치해 주세요.<br>멜론 플레이어 설치에 문제가 있는 경우 <a href="https://faqs2.melon.com/customer/index.htm" class="link" target="_blank">고객지원센터</a>로<br>문의하여 주세요</p>',
				'    <div class="button_group">',
				'      <button type="button" title="플레이어 다운로드" onclick="location.href=\'https://static.melon.co.kr/svc/pcp/apps/MelonSetup.exe\'"><a href="javascript:;">플레이어 다운로드</a></button>',
				'    </div>',
				'  </div>',
				'  <button type="button" title="팝업 닫기" class="btn_close d_close"><span>팝업 닫기</span></button>',
				'  <span class="shadow"></span>',
				'</div>'].join('');
			$(tmpl).appendTo('body').end();
			$('.newpcp_pop_setup').modal('show');
		},
		hide : function(){
			$('.newpcp_pop_setup').modal('hide');
		}
	}
};

var isPcpHomeTab = function() {
	return (getCookie("MPS") != null && getCookie("MPS").indexOf("MELONPLAYER") > -1);
};

//회원 정보 가져오기
function getMemberInfo(){
	var memberKey = getMemberKey()
	var memberInfo = null;

	if(memberKey == null || memberKey == ''){
		return memberInfo;
	};

	$.ajax({
		type: "GET",
		url: '/memapi/v1/profileByKey.json',
		data: {
			memberKey : memberKey,
			properties : 'realNameYn,ipinBirthDate'
		},
		dataType: 'json',
		async: false,
		error: function(request, status, error) {
			return memberInfo;
		},
		success: function(data) {
			if(data.RESULTCODE != undefined || data.RESULTCODE == '0' || data.MEMBERINFO != undefined){
				memberInfo = data.MEMBERINFO;
			}
		}
	});
	return memberInfo;
}

//회원 본인/성인 정보 가져오기
function getMemberAuthInfo(){
	var memberKey = getMemberKey()
	var pocId = getCookie("POC");
	var checkAgeAuthInfo = null;

	if(memberKey == null || memberKey == ''){
		return checkAgeAuthInfo;
	};

	var url = '/memapi/v1/checkAgeAuthByKey.json';

	$.ajax({
		type: "GET",
		url: url,
		data: {
			memberKey : memberKey,
			pocId : pocId
		},
		dataType: 'json',
		async: false,
		error: function(request, status, error) {
			return checkAgeAuthInfo;
		},
		success: function(data) {
			if(data.RESULTCODE != undefined || data.RESULTCODE == '0' || data.CHECKAGEAUTHINFO != undefined){
				checkAgeAuthInfo = data.CHECKAGEAUTHINFO;
			}
		}
	});
	return checkAgeAuthInfo;
}



